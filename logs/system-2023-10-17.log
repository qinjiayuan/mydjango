2023-10-17 21:04:45,689 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_project_qy',); args=['otc_project_qy']
2023-10-17 21:04:45,765 [DEBUG]    utils.py.execute [90] -- (0.063) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('otc_project_qy',); args=['otc_project_qy']
2023-10-17 21:04:45,815 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_project_qy',); args=['otc_project_qy']
2023-10-17 21:04:45,890 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_project_qy',); args=['otc_project_qy']
2023-10-17 21:04:45,977 [DEBUG]    utils.py.execute [90] -- (0.052) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('otc_project_qy',); args=['otc_project_qy']
2023-10-17 21:04:46,011 [DEBUG]    utils.py.execute [90] -- (0.033) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('otc_project_qy',); args=['otc_project_qy']
2023-10-17 21:04:46,101 [DEBUG]    utils.py.execute [90] -- (0.036) QUERY = 'SELECT * FROM "OTC_PROJECT_QY" WHERE ROWNUM < 2 AND 992 > 0' - PARAMS = (); args=None
2023-10-17 21:04:46,137 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('OTC_PROJECT_REFERRER_INFO',); args=['OTC_PROJECT_REFERRER_INFO']
2023-10-17 21:04:46,172 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_project_referrer_info',); args=['otc_project_referrer_info']
2023-10-17 21:04:46,237 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_project_referrer_info',); args=['otc_project_referrer_info']
2023-10-17 21:04:46,291 [DEBUG]    utils.py.execute [90] -- (0.053) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('otc_project_referrer_info',); args=['otc_project_referrer_info']
2023-10-17 21:04:46,325 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_project_referrer_info',); args=['otc_project_referrer_info']
2023-10-17 21:04:46,391 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_project_referrer_info',); args=['otc_project_referrer_info']
2023-10-17 21:04:46,446 [DEBUG]    utils.py.execute [90] -- (0.054) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('otc_project_referrer_info',); args=['otc_project_referrer_info']
2023-10-17 21:04:46,479 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('otc_project_referrer_info',); args=['otc_project_referrer_info']
2023-10-17 21:04:46,552 [DEBUG]    utils.py.execute [90] -- (0.041) QUERY = 'SELECT * FROM "OTC_PROJECT_REFERRER_INFO" WHERE ROWNUM < 2 AND 993 > 0' - PARAMS = (); args=None
2023-10-17 21:04:46,585 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('OTC_PROJECT_REFERRER_INFO2',); args=['OTC_PROJECT_REFERRER_INFO2']
2023-10-17 21:04:46,620 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_project_referrer_info2',); args=['otc_project_referrer_info2']
2023-10-17 21:04:46,683 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_project_referrer_info2',); args=['otc_project_referrer_info2']
2023-10-17 21:04:46,744 [DEBUG]    utils.py.execute [90] -- (0.057) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('otc_project_referrer_info2',); args=['otc_project_referrer_info2']
2023-10-17 21:04:46,777 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_project_referrer_info2',); args=['otc_project_referrer_info2']
2023-10-17 21:04:46,839 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_project_referrer_info2',); args=['otc_project_referrer_info2']
2023-10-17 21:04:46,900 [DEBUG]    utils.py.execute [90] -- (0.053) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('otc_project_referrer_info2',); args=['otc_project_referrer_info2']
2023-10-17 21:04:46,939 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('otc_project_referrer_info2',); args=['otc_project_referrer_info2']
2023-10-17 21:04:47,012 [DEBUG]    utils.py.execute [90] -- (0.039) QUERY = 'SELECT * FROM "OTC_PROJECT_REFERRER_INFO2" WHERE ROWNUM < 2 AND 994 > 0' - PARAMS = (); args=None
2023-10-17 21:04:47,049 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('OTC_PROJECT_REFERRER_INFO2_01',); args=['OTC_PROJECT_REFERRER_INFO2_01']
2023-10-17 21:04:47,080 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_project_referrer_info2_01',); args=['otc_project_referrer_info2_01']
2023-10-17 21:04:47,112 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_project_referrer_info2_01',); args=['otc_project_referrer_info2_01']
2023-10-17 21:04:47,144 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('otc_project_referrer_info2_01',); args=['otc_project_referrer_info2_01']
2023-10-17 21:04:47,174 [DEBUG]    utils.py.execute [90] -- (0.029) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_project_referrer_info2_01',); args=['otc_project_referrer_info2_01']
2023-10-17 21:04:47,206 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_project_referrer_info2_01',); args=['otc_project_referrer_info2_01']
2023-10-17 21:04:47,238 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('otc_project_referrer_info2_01',); args=['otc_project_referrer_info2_01']
2023-10-17 21:04:47,273 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('otc_project_referrer_info2_01',); args=['otc_project_referrer_info2_01']
2023-10-17 21:04:47,337 [DEBUG]    utils.py.execute [90] -- (0.034) QUERY = 'SELECT * FROM "OTC_PROJECT_REFERRER_INFO2_01" WHERE ROWNUM < 2 AND 995 > 0' - PARAMS = (); args=None
2023-10-17 21:04:47,372 [DEBUG]    utils.py.execute [90] -- (0.034) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('OTC_PROJECT_REMINDER',); args=['OTC_PROJECT_REMINDER']
2023-10-17 21:04:47,404 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_project_reminder',); args=['otc_project_reminder']
2023-10-17 21:04:47,472 [DEBUG]    utils.py.execute [90] -- (0.034) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_project_reminder',); args=['otc_project_reminder']
2023-10-17 21:04:47,528 [DEBUG]    utils.py.execute [90] -- (0.056) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('otc_project_reminder',); args=['otc_project_reminder']
2023-10-17 21:04:47,559 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_project_reminder',); args=['otc_project_reminder']
2023-10-17 21:04:47,622 [DEBUG]    utils.py.execute [90] -- (0.029) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_project_reminder',); args=['otc_project_reminder']
2023-10-17 21:04:47,674 [DEBUG]    utils.py.execute [90] -- (0.051) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('otc_project_reminder',); args=['otc_project_reminder']
2023-10-17 21:04:47,707 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('otc_project_reminder',); args=['otc_project_reminder']
2023-10-17 21:04:47,776 [DEBUG]    utils.py.execute [90] -- (0.036) QUERY = 'SELECT * FROM "OTC_PROJECT_REMINDER" WHERE ROWNUM < 2 AND 996 > 0' - PARAMS = (); args=None
2023-10-17 21:04:47,809 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('OTC_PROJECT_ZJTZ',); args=['OTC_PROJECT_ZJTZ']
2023-10-17 21:04:47,843 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_project_zjtz',); args=['otc_project_zjtz']
2023-10-17 21:04:47,904 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_project_zjtz',); args=['otc_project_zjtz']
2023-10-17 21:04:47,966 [DEBUG]    utils.py.execute [90] -- (0.061) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('otc_project_zjtz',); args=['otc_project_zjtz']
2023-10-17 21:04:47,999 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_project_zjtz',); args=['otc_project_zjtz']
2023-10-17 21:04:48,082 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_project_zjtz',); args=['otc_project_zjtz']
2023-10-17 21:04:48,135 [DEBUG]    utils.py.execute [90] -- (0.052) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('otc_project_zjtz',); args=['otc_project_zjtz']
2023-10-17 21:04:48,166 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('otc_project_zjtz',); args=['otc_project_zjtz']
2023-10-17 21:04:48,232 [DEBUG]    utils.py.execute [90] -- (0.035) QUERY = 'SELECT * FROM "OTC_PROJECT_ZJTZ" WHERE ROWNUM < 2 AND 997 > 0' - PARAMS = (); args=None
2023-10-17 21:04:48,264 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('OTC_PROMOTIONAGENCIES',); args=['OTC_PROMOTIONAGENCIES']
2023-10-17 21:04:48,295 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_promotionagencies',); args=['otc_promotionagencies']
2023-10-17 21:04:48,357 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_promotionagencies',); args=['otc_promotionagencies']
2023-10-17 21:04:48,416 [DEBUG]    utils.py.execute [90] -- (0.058) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('otc_promotionagencies',); args=['otc_promotionagencies']
2023-10-17 21:04:48,450 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_promotionagencies',); args=['otc_promotionagencies']
2023-10-17 21:04:48,513 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_promotionagencies',); args=['otc_promotionagencies']
2023-10-17 21:04:48,569 [DEBUG]    utils.py.execute [90] -- (0.052) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('otc_promotionagencies',); args=['otc_promotionagencies']
2023-10-17 21:04:48,600 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('otc_promotionagencies',); args=['otc_promotionagencies']
2023-10-17 21:04:48,668 [DEBUG]    utils.py.execute [90] -- (0.037) QUERY = 'SELECT * FROM "OTC_PROMOTIONAGENCIES" WHERE ROWNUM < 2 AND 998 > 0' - PARAMS = (); args=None
2023-10-17 21:04:48,702 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('OTC_QSINFO',); args=['OTC_QSINFO']
2023-10-17 21:04:48,732 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_qsinfo',); args=['otc_qsinfo']
2023-10-17 21:04:48,795 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_qsinfo',); args=['otc_qsinfo']
2023-10-17 21:04:48,851 [DEBUG]    utils.py.execute [90] -- (0.055) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('otc_qsinfo',); args=['otc_qsinfo']
2023-10-17 21:04:48,883 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_qsinfo',); args=['otc_qsinfo']
2023-10-17 21:04:48,944 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_qsinfo',); args=['otc_qsinfo']
2023-10-17 21:04:48,998 [DEBUG]    utils.py.execute [90] -- (0.053) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('otc_qsinfo',); args=['otc_qsinfo']
2023-10-17 21:04:49,030 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('otc_qsinfo',); args=['otc_qsinfo']
2023-10-17 21:04:49,097 [DEBUG]    utils.py.execute [90] -- (0.036) QUERY = 'SELECT * FROM "OTC_QSINFO" WHERE ROWNUM < 2 AND 999 > 0' - PARAMS = (); args=None
2023-10-17 21:04:49,132 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('OTC_QUOTE_BRANCH',); args=['OTC_QUOTE_BRANCH']
2023-10-17 21:04:49,166 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_quote_branch',); args=['otc_quote_branch']
2023-10-17 21:04:49,230 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_quote_branch',); args=['otc_quote_branch']
2023-10-17 21:04:49,287 [DEBUG]    utils.py.execute [90] -- (0.055) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('otc_quote_branch',); args=['otc_quote_branch']
2023-10-17 21:04:49,320 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_quote_branch',); args=['otc_quote_branch']
2023-10-17 21:04:49,385 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_quote_branch',); args=['otc_quote_branch']
2023-10-17 21:04:49,438 [DEBUG]    utils.py.execute [90] -- (0.051) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('otc_quote_branch',); args=['otc_quote_branch']
2023-10-17 21:04:49,470 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('otc_quote_branch',); args=['otc_quote_branch']
2023-10-17 21:04:49,538 [DEBUG]    utils.py.execute [90] -- (0.037) QUERY = 'SELECT * FROM "OTC_QUOTE_BRANCH" WHERE ROWNUM < 2 AND 1000 > 0' - PARAMS = (); args=None
2023-10-17 21:04:49,571 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('OTC_QUOTE_INFO',); args=['OTC_QUOTE_INFO']
2023-10-17 21:04:49,603 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_quote_info',); args=['otc_quote_info']
2023-10-17 21:04:49,665 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_quote_info',); args=['otc_quote_info']
2023-10-17 21:04:49,724 [DEBUG]    utils.py.execute [90] -- (0.055) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('otc_quote_info',); args=['otc_quote_info']
2023-10-17 21:04:49,759 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_quote_info',); args=['otc_quote_info']
2023-10-17 21:04:49,823 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_quote_info',); args=['otc_quote_info']
2023-10-17 21:04:49,879 [DEBUG]    utils.py.execute [90] -- (0.054) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('otc_quote_info',); args=['otc_quote_info']
2023-10-17 21:04:49,912 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('otc_quote_info',); args=['otc_quote_info']
2023-10-17 21:04:49,979 [DEBUG]    utils.py.execute [90] -- (0.036) QUERY = 'SELECT * FROM "OTC_QUOTE_INFO" WHERE ROWNUM < 2 AND 1001 > 0' - PARAMS = (); args=None
2023-10-17 21:04:50,011 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('OTC_QUOTE_LIMITED',); args=['OTC_QUOTE_LIMITED']
2023-10-17 21:04:50,044 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_quote_limited',); args=['otc_quote_limited']
2023-10-17 21:04:50,107 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_quote_limited',); args=['otc_quote_limited']
2023-10-17 21:04:50,142 [DEBUG]    utils.py.execute [90] -- (0.034) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('otc_quote_limited',); args=['otc_quote_limited']
2023-10-17 21:04:50,173 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_quote_limited',); args=['otc_quote_limited']
2023-10-17 21:04:50,238 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_quote_limited',); args=['otc_quote_limited']
2023-10-17 21:04:50,271 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('otc_quote_limited',); args=['otc_quote_limited']
2023-10-17 21:04:50,302 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('otc_quote_limited',); args=['otc_quote_limited']
2023-10-17 21:04:50,368 [DEBUG]    utils.py.execute [90] -- (0.035) QUERY = 'SELECT * FROM "OTC_QUOTE_LIMITED" WHERE ROWNUM < 2 AND 1002 > 0' - PARAMS = (); args=None
2023-10-17 21:04:50,400 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('OTC_QUOTE_STATUS',); args=['OTC_QUOTE_STATUS']
2023-10-17 21:04:50,433 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_quote_status',); args=['otc_quote_status']
2023-10-17 21:04:50,496 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_quote_status',); args=['otc_quote_status']
2023-10-17 21:04:50,550 [DEBUG]    utils.py.execute [90] -- (0.053) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('otc_quote_status',); args=['otc_quote_status']
2023-10-17 21:04:50,584 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_quote_status',); args=['otc_quote_status']
2023-10-17 21:04:50,646 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_quote_status',); args=['otc_quote_status']
2023-10-17 21:04:50,699 [DEBUG]    utils.py.execute [90] -- (0.052) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('otc_quote_status',); args=['otc_quote_status']
2023-10-17 21:04:50,730 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('otc_quote_status',); args=['otc_quote_status']
2023-10-17 21:04:50,800 [DEBUG]    utils.py.execute [90] -- (0.039) QUERY = 'SELECT * FROM "OTC_QUOTE_STATUS" WHERE ROWNUM < 2 AND 1003 > 0' - PARAMS = (); args=None
2023-10-17 21:04:50,833 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('OTC_QYBASEINFO',); args=['OTC_QYBASEINFO']
2023-10-17 21:04:50,868 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_qybaseinfo',); args=['otc_qybaseinfo']
2023-10-17 21:04:50,930 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_qybaseinfo',); args=['otc_qybaseinfo']
2023-10-17 21:04:50,986 [DEBUG]    utils.py.execute [90] -- (0.055) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('otc_qybaseinfo',); args=['otc_qybaseinfo']
2023-10-17 21:04:51,018 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_qybaseinfo',); args=['otc_qybaseinfo']
2023-10-17 21:04:51,083 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_qybaseinfo',); args=['otc_qybaseinfo']
2023-10-17 21:04:51,137 [DEBUG]    utils.py.execute [90] -- (0.053) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('otc_qybaseinfo',); args=['otc_qybaseinfo']
2023-10-17 21:04:51,168 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('otc_qybaseinfo',); args=['otc_qybaseinfo']
2023-10-17 21:04:51,237 [DEBUG]    utils.py.execute [90] -- (0.036) QUERY = 'SELECT * FROM "OTC_QYBASEINFO" WHERE ROWNUM < 2 AND 1004 > 0' - PARAMS = (); args=None
2023-10-17 21:04:51,270 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('OTC_RP_ROLE_PROD',); args=['OTC_RP_ROLE_PROD']
2023-10-17 21:04:51,301 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_rp_role_prod',); args=['otc_rp_role_prod']
2023-10-17 21:04:51,363 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_rp_role_prod',); args=['otc_rp_role_prod']
2023-10-17 21:04:51,418 [DEBUG]    utils.py.execute [90] -- (0.053) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('otc_rp_role_prod',); args=['otc_rp_role_prod']
2023-10-17 21:04:51,448 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_rp_role_prod',); args=['otc_rp_role_prod']
2023-10-17 21:04:51,512 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_rp_role_prod',); args=['otc_rp_role_prod']
2023-10-17 21:04:51,565 [DEBUG]    utils.py.execute [90] -- (0.052) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('otc_rp_role_prod',); args=['otc_rp_role_prod']
2023-10-17 21:04:51,596 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('otc_rp_role_prod',); args=['otc_rp_role_prod']
2023-10-17 21:04:51,662 [DEBUG]    utils.py.execute [90] -- (0.035) QUERY = 'SELECT * FROM "OTC_RP_ROLE_PROD" WHERE ROWNUM < 2 AND 1005 > 0' - PARAMS = (); args=None
2023-10-17 21:04:51,694 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('OTC_SAME_SUBJECT',); args=['OTC_SAME_SUBJECT']
2023-10-17 21:04:51,723 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_same_subject',); args=['otc_same_subject']
2023-10-17 21:04:51,786 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_same_subject',); args=['otc_same_subject']
2023-10-17 21:04:51,865 [DEBUG]    utils.py.execute [90] -- (0.079) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('otc_same_subject',); args=['otc_same_subject']
2023-10-17 21:04:51,925 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_same_subject',); args=['otc_same_subject']
2023-10-17 21:04:51,987 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_same_subject',); args=['otc_same_subject']
2023-10-17 21:04:52,067 [DEBUG]    utils.py.execute [90] -- (0.079) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('otc_same_subject',); args=['otc_same_subject']
2023-10-17 21:04:52,130 [DEBUG]    utils.py.execute [90] -- (0.029) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('otc_same_subject',); args=['otc_same_subject']
2023-10-17 21:04:52,196 [DEBUG]    utils.py.execute [90] -- (0.036) QUERY = 'SELECT * FROM "OTC_SAME_SUBJECT" WHERE ROWNUM < 2 AND 1006 > 0' - PARAMS = (); args=None
2023-10-17 21:04:52,227 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('OTC_SAME_SUBJECT_HIS',); args=['OTC_SAME_SUBJECT_HIS']
2023-10-17 21:04:52,259 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_same_subject_his',); args=['otc_same_subject_his']
2023-10-17 21:04:52,321 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_same_subject_his',); args=['otc_same_subject_his']
2023-10-17 21:04:52,399 [DEBUG]    utils.py.execute [90] -- (0.076) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('otc_same_subject_his',); args=['otc_same_subject_his']
2023-10-17 21:04:52,460 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_same_subject_his',); args=['otc_same_subject_his']
2023-10-17 21:04:52,521 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_same_subject_his',); args=['otc_same_subject_his']
2023-10-17 21:04:52,602 [DEBUG]    utils.py.execute [90] -- (0.079) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('otc_same_subject_his',); args=['otc_same_subject_his']
2023-10-17 21:04:52,662 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('otc_same_subject_his',); args=['otc_same_subject_his']
2023-10-17 21:04:52,726 [DEBUG]    utils.py.execute [90] -- (0.033) QUERY = 'SELECT * FROM "OTC_SAME_SUBJECT_HIS" WHERE ROWNUM < 2 AND 1007 > 0' - PARAMS = (); args=None
2023-10-17 21:04:52,758 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('OTC_SEASON_INTEREST_STATEMENT',); args=['OTC_SEASON_INTEREST_STATEMENT']
2023-10-17 21:04:52,790 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_season_interest_statement',); args=['otc_season_interest_statement']
2023-10-17 21:04:52,853 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_season_interest_statement',); args=['otc_season_interest_statement']
2023-10-17 21:04:52,910 [DEBUG]    utils.py.execute [90] -- (0.056) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('otc_season_interest_statement',); args=['otc_season_interest_statement']
2023-10-17 21:04:52,942 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_season_interest_statement',); args=['otc_season_interest_statement']
2023-10-17 21:04:53,004 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_season_interest_statement',); args=['otc_season_interest_statement']
2023-10-17 21:04:53,057 [DEBUG]    utils.py.execute [90] -- (0.053) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('otc_season_interest_statement',); args=['otc_season_interest_statement']
2023-10-17 21:04:53,088 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('otc_season_interest_statement',); args=['otc_season_interest_statement']
2023-10-17 21:04:53,155 [DEBUG]    utils.py.execute [90] -- (0.035) QUERY = 'SELECT * FROM "OTC_SEASON_INTEREST_STATEMENT" WHERE ROWNUM < 2 AND 1008 > 0' - PARAMS = (); args=None
2023-10-17 21:04:53,187 [DEBUG]    utils.py.execute [90] -- (0.033) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('OTC_SECURITYLENDING',); args=['OTC_SECURITYLENDING']
2023-10-17 21:04:53,222 [DEBUG]    utils.py.execute [90] -- (0.034) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_securitylending',); args=['otc_securitylending']
2023-10-17 21:04:53,254 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_securitylending',); args=['otc_securitylending']
2023-10-17 21:04:53,287 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('otc_securitylending',); args=['otc_securitylending']
2023-10-17 21:04:53,319 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_securitylending',); args=['otc_securitylending']
2023-10-17 21:04:53,350 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_securitylending',); args=['otc_securitylending']
2023-10-17 21:04:53,384 [DEBUG]    utils.py.execute [90] -- (0.033) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('otc_securitylending',); args=['otc_securitylending']
2023-10-17 21:04:53,415 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('otc_securitylending',); args=['otc_securitylending']
2023-10-17 21:04:53,480 [DEBUG]    utils.py.execute [90] -- (0.033) QUERY = 'SELECT * FROM "OTC_SECURITYLENDING" WHERE ROWNUM < 2 AND 1009 > 0' - PARAMS = (); args=None
2023-10-17 21:04:53,511 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('OTC_SECURITYLENDING_HIS',); args=['OTC_SECURITYLENDING_HIS']
2023-10-17 21:04:53,542 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_securitylending_his',); args=['otc_securitylending_his']
2023-10-17 21:04:53,574 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_securitylending_his',); args=['otc_securitylending_his']
2023-10-17 21:04:53,605 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('otc_securitylending_his',); args=['otc_securitylending_his']
2023-10-17 21:04:53,635 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_securitylending_his',); args=['otc_securitylending_his']
2023-10-17 21:04:53,666 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_securitylending_his',); args=['otc_securitylending_his']
2023-10-17 21:04:53,699 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('otc_securitylending_his',); args=['otc_securitylending_his']
2023-10-17 21:04:53,730 [DEBUG]    utils.py.execute [90] -- (0.029) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('otc_securitylending_his',); args=['otc_securitylending_his']
2023-10-17 21:04:53,794 [DEBUG]    utils.py.execute [90] -- (0.033) QUERY = 'SELECT * FROM "OTC_SECURITYLENDING_HIS" WHERE ROWNUM < 2 AND 1010 > 0' - PARAMS = (); args=None
2023-10-17 21:04:53,826 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('OTC_SECURITYLENDING_RECORD',); args=['OTC_SECURITYLENDING_RECORD']
2023-10-17 21:04:53,856 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_securitylending_record',); args=['otc_securitylending_record']
2023-10-17 21:04:53,887 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_securitylending_record',); args=['otc_securitylending_record']
2023-10-17 21:04:53,922 [DEBUG]    utils.py.execute [90] -- (0.033) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('otc_securitylending_record',); args=['otc_securitylending_record']
2023-10-17 21:04:53,953 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_securitylending_record',); args=['otc_securitylending_record']
2023-10-17 21:04:53,989 [DEBUG]    utils.py.execute [90] -- (0.034) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_securitylending_record',); args=['otc_securitylending_record']
2023-10-17 21:04:54,021 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('otc_securitylending_record',); args=['otc_securitylending_record']
2023-10-17 21:04:54,051 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('otc_securitylending_record',); args=['otc_securitylending_record']
2023-10-17 21:04:54,116 [DEBUG]    utils.py.execute [90] -- (0.035) QUERY = 'SELECT * FROM "OTC_SECURITYLENDING_RECORD" WHERE ROWNUM < 2 AND 1011 > 0' - PARAMS = (); args=None
2023-10-17 21:04:54,148 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('OTC_SENDMAIL_RECORD',); args=['OTC_SENDMAIL_RECORD']
2023-10-17 21:04:54,178 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_sendmail_record',); args=['otc_sendmail_record']
2023-10-17 21:04:54,211 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_sendmail_record',); args=['otc_sendmail_record']
2023-10-17 21:04:54,244 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('otc_sendmail_record',); args=['otc_sendmail_record']
2023-10-17 21:04:54,275 [DEBUG]    utils.py.execute [90] -- (0.029) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_sendmail_record',); args=['otc_sendmail_record']
2023-10-17 21:04:54,305 [DEBUG]    utils.py.execute [90] -- (0.029) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_sendmail_record',); args=['otc_sendmail_record']
2023-10-17 21:04:54,339 [DEBUG]    utils.py.execute [90] -- (0.033) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('otc_sendmail_record',); args=['otc_sendmail_record']
2023-10-17 21:04:54,370 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('otc_sendmail_record',); args=['otc_sendmail_record']
2023-10-17 21:04:54,433 [DEBUG]    utils.py.execute [90] -- (0.033) QUERY = 'SELECT * FROM "OTC_SENDMAIL_RECORD" WHERE ROWNUM < 2 AND 1012 > 0' - PARAMS = (); args=None
2023-10-17 21:04:54,465 [DEBUG]    utils.py.execute [90] -- (0.033) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('OTC_SPECIAL_GI',); args=['OTC_SPECIAL_GI']
2023-10-17 21:04:54,499 [DEBUG]    utils.py.execute [90] -- (0.033) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_special_gi',); args=['otc_special_gi']
2023-10-17 21:04:54,531 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_special_gi',); args=['otc_special_gi']
2023-10-17 21:04:54,563 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('otc_special_gi',); args=['otc_special_gi']
2023-10-17 21:04:54,594 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_special_gi',); args=['otc_special_gi']
2023-10-17 21:04:54,626 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_special_gi',); args=['otc_special_gi']
2023-10-17 21:04:54,657 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('otc_special_gi',); args=['otc_special_gi']
2023-10-17 21:04:54,688 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('otc_special_gi',); args=['otc_special_gi']
2023-10-17 21:04:54,751 [DEBUG]    utils.py.execute [90] -- (0.033) QUERY = 'SELECT * FROM "OTC_SPECIAL_GI" WHERE ROWNUM < 2 AND 1013 > 0' - PARAMS = (); args=None
2023-10-17 21:04:54,781 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('OTC_STANDING_BOOK_ASSET',); args=['OTC_STANDING_BOOK_ASSET']
2023-10-17 21:04:54,812 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_standing_book_asset',); args=['otc_standing_book_asset']
2023-10-17 21:04:54,872 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_standing_book_asset',); args=['otc_standing_book_asset']
2023-10-17 21:04:54,929 [DEBUG]    utils.py.execute [90] -- (0.056) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('otc_standing_book_asset',); args=['otc_standing_book_asset']
2023-10-17 21:04:54,960 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_standing_book_asset',); args=['otc_standing_book_asset']
2023-10-17 21:04:55,109 [DEBUG]    utils.py.execute [90] -- (0.118) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_standing_book_asset',); args=['otc_standing_book_asset']
2023-10-17 21:04:55,162 [DEBUG]    utils.py.execute [90] -- (0.052) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('otc_standing_book_asset',); args=['otc_standing_book_asset']
2023-10-17 21:04:55,193 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('otc_standing_book_asset',); args=['otc_standing_book_asset']
2023-10-17 21:04:55,263 [DEBUG]    utils.py.execute [90] -- (0.040) QUERY = 'SELECT * FROM "OTC_STANDING_BOOK_ASSET" WHERE ROWNUM < 2 AND 1014 > 0' - PARAMS = (); args=None
2023-10-17 21:04:55,295 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('OTC_STANDING_BOOK_RP_DAILY',); args=['OTC_STANDING_BOOK_RP_DAILY']
2023-10-17 21:04:55,326 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_standing_book_rp_daily',); args=['otc_standing_book_rp_daily']
2023-10-17 21:04:55,358 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_standing_book_rp_daily',); args=['otc_standing_book_rp_daily']
2023-10-17 21:04:55,419 [DEBUG]    utils.py.execute [90] -- (0.060) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('otc_standing_book_rp_daily',); args=['otc_standing_book_rp_daily']
2023-10-17 21:04:55,452 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_standing_book_rp_daily',); args=['otc_standing_book_rp_daily']
2023-10-17 21:04:55,483 [DEBUG]    utils.py.execute [90] -- (0.029) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_standing_book_rp_daily',); args=['otc_standing_book_rp_daily']
2023-10-17 21:04:55,544 [DEBUG]    utils.py.execute [90] -- (0.060) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('otc_standing_book_rp_daily',); args=['otc_standing_book_rp_daily']
2023-10-17 21:04:55,575 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('otc_standing_book_rp_daily',); args=['otc_standing_book_rp_daily']
2023-10-17 21:04:55,644 [DEBUG]    utils.py.execute [90] -- (0.038) QUERY = 'SELECT * FROM "OTC_STANDING_BOOK_RP_DAILY" WHERE ROWNUM < 2 AND 1015 > 0' - PARAMS = (); args=None
2023-10-17 21:04:55,677 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('OTC_STANDING_BOOK_RP_TRADING',); args=['OTC_STANDING_BOOK_RP_TRADING']
2023-10-17 21:04:55,708 [DEBUG]    utils.py.execute [90] -- (0.029) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_standing_book_rp_trading',); args=['otc_standing_book_rp_trading']
2023-10-17 21:04:55,769 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_standing_book_rp_trading',); args=['otc_standing_book_rp_trading']
2023-10-17 21:04:55,841 [DEBUG]    utils.py.execute [90] -- (0.070) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('otc_standing_book_rp_trading',); args=['otc_standing_book_rp_trading']
2023-10-17 21:04:55,873 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_standing_book_rp_trading',); args=['otc_standing_book_rp_trading']
2023-10-17 21:04:55,934 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_standing_book_rp_trading',); args=['otc_standing_book_rp_trading']
2023-10-17 21:04:56,001 [DEBUG]    utils.py.execute [90] -- (0.065) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('otc_standing_book_rp_trading',); args=['otc_standing_book_rp_trading']
2023-10-17 21:04:56,037 [DEBUG]    utils.py.execute [90] -- (0.036) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('otc_standing_book_rp_trading',); args=['otc_standing_book_rp_trading']
2023-10-17 21:04:56,111 [DEBUG]    utils.py.execute [90] -- (0.042) QUERY = 'SELECT * FROM "OTC_STANDING_BOOK_RP_TRADING" WHERE ROWNUM < 2 AND 1016 > 0' - PARAMS = (); args=None
2023-10-17 21:04:56,143 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('OTC_STOCKPOOL_LEVELTHREE',); args=['OTC_STOCKPOOL_LEVELTHREE']
2023-10-17 21:04:56,176 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_stockpool_levelthree',); args=['otc_stockpool_levelthree']
2023-10-17 21:04:56,241 [DEBUG]    utils.py.execute [90] -- (0.033) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_stockpool_levelthree',); args=['otc_stockpool_levelthree']
2023-10-17 21:04:56,297 [DEBUG]    utils.py.execute [90] -- (0.055) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('otc_stockpool_levelthree',); args=['otc_stockpool_levelthree']
2023-10-17 21:04:56,329 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_stockpool_levelthree',); args=['otc_stockpool_levelthree']
2023-10-17 21:04:56,391 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_stockpool_levelthree',); args=['otc_stockpool_levelthree']
2023-10-17 21:04:56,443 [DEBUG]    utils.py.execute [90] -- (0.052) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('otc_stockpool_levelthree',); args=['otc_stockpool_levelthree']
2023-10-17 21:04:56,475 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('otc_stockpool_levelthree',); args=['otc_stockpool_levelthree']
2023-10-17 21:04:56,540 [DEBUG]    utils.py.execute [90] -- (0.035) QUERY = 'SELECT * FROM "OTC_STOCKPOOL_LEVELTHREE" WHERE ROWNUM < 2 AND 1017 > 0' - PARAMS = (); args=None
2023-10-17 21:04:56,571 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('OTC_STOCKPOOL_LOG',); args=['OTC_STOCKPOOL_LOG']
2023-10-17 21:04:56,602 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_stockpool_log',); args=['otc_stockpool_log']
2023-10-17 21:04:56,664 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_stockpool_log',); args=['otc_stockpool_log']
2023-10-17 21:04:56,721 [DEBUG]    utils.py.execute [90] -- (0.056) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('otc_stockpool_log',); args=['otc_stockpool_log']
2023-10-17 21:04:56,753 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_stockpool_log',); args=['otc_stockpool_log']
2023-10-17 21:04:56,814 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_stockpool_log',); args=['otc_stockpool_log']
2023-10-17 21:04:56,866 [DEBUG]    utils.py.execute [90] -- (0.052) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('otc_stockpool_log',); args=['otc_stockpool_log']
2023-10-17 21:04:56,897 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('otc_stockpool_log',); args=['otc_stockpool_log']
2023-10-17 21:04:56,962 [DEBUG]    utils.py.execute [90] -- (0.034) QUERY = 'SELECT * FROM "OTC_STOCKPOOL_LOG" WHERE ROWNUM < 2 AND 1018 > 0' - PARAMS = (); args=None
2023-10-17 21:04:56,994 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('OTC_SUBJECT_POOL',); args=['OTC_SUBJECT_POOL']
2023-10-17 21:04:57,026 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_subject_pool',); args=['otc_subject_pool']
2023-10-17 21:04:57,090 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_subject_pool',); args=['otc_subject_pool']
2023-10-17 21:04:57,147 [DEBUG]    utils.py.execute [90] -- (0.056) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('otc_subject_pool',); args=['otc_subject_pool']
2023-10-17 21:04:57,177 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_subject_pool',); args=['otc_subject_pool']
2023-10-17 21:04:57,238 [DEBUG]    utils.py.execute [90] -- (0.029) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_subject_pool',); args=['otc_subject_pool']
2023-10-17 21:04:57,290 [DEBUG]    utils.py.execute [90] -- (0.051) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('otc_subject_pool',); args=['otc_subject_pool']
2023-10-17 21:04:57,320 [DEBUG]    utils.py.execute [90] -- (0.029) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('otc_subject_pool',); args=['otc_subject_pool']
2023-10-17 21:04:57,391 [DEBUG]    utils.py.execute [90] -- (0.039) QUERY = 'SELECT * FROM "OTC_SUBJECT_POOL" WHERE ROWNUM < 2 AND 1019 > 0' - PARAMS = (); args=None
2023-10-17 21:04:57,422 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('OTC_SUBJECT_PRICE',); args=['OTC_SUBJECT_PRICE']
2023-10-17 21:04:57,455 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_subject_price',); args=['otc_subject_price']
2023-10-17 21:04:57,516 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_subject_price',); args=['otc_subject_price']
2023-10-17 21:04:57,572 [DEBUG]    utils.py.execute [90] -- (0.056) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('otc_subject_price',); args=['otc_subject_price']
2023-10-17 21:04:57,603 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_subject_price',); args=['otc_subject_price']
2023-10-17 21:04:57,666 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_subject_price',); args=['otc_subject_price']
2023-10-17 21:04:57,720 [DEBUG]    utils.py.execute [90] -- (0.053) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('otc_subject_price',); args=['otc_subject_price']
2023-10-17 21:04:57,750 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('otc_subject_price',); args=['otc_subject_price']
2023-10-17 21:04:57,815 [DEBUG]    utils.py.execute [90] -- (0.033) QUERY = 'SELECT * FROM "OTC_SUBJECT_PRICE" WHERE ROWNUM < 2 AND 1020 > 0' - PARAMS = (); args=None
2023-10-17 21:04:57,846 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('OTC_SWAP_DAILY_STOCK',); args=['OTC_SWAP_DAILY_STOCK']
2023-10-17 21:04:57,878 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_swap_daily_stock',); args=['otc_swap_daily_stock']
2023-10-17 21:04:57,938 [DEBUG]    utils.py.execute [90] -- (0.029) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_swap_daily_stock',); args=['otc_swap_daily_stock']
2023-10-17 21:04:57,992 [DEBUG]    utils.py.execute [90] -- (0.054) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('otc_swap_daily_stock',); args=['otc_swap_daily_stock']
2023-10-17 21:04:58,024 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_swap_daily_stock',); args=['otc_swap_daily_stock']
2023-10-17 21:04:58,084 [DEBUG]    utils.py.execute [90] -- (0.029) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_swap_daily_stock',); args=['otc_swap_daily_stock']
2023-10-17 21:04:58,137 [DEBUG]    utils.py.execute [90] -- (0.052) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('otc_swap_daily_stock',); args=['otc_swap_daily_stock']
2023-10-17 21:04:58,168 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('otc_swap_daily_stock',); args=['otc_swap_daily_stock']
2023-10-17 21:04:58,236 [DEBUG]    utils.py.execute [90] -- (0.038) QUERY = 'SELECT * FROM "OTC_SWAP_DAILY_STOCK" WHERE ROWNUM < 2 AND 1021 > 0' - PARAMS = (); args=None
2023-10-17 21:04:58,268 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('OTC_TRADE_DETAIL',); args=['OTC_TRADE_DETAIL']
2023-10-17 21:04:58,301 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_trade_detail',); args=['otc_trade_detail']
2023-10-17 21:04:58,361 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_trade_detail',); args=['otc_trade_detail']
2023-10-17 21:04:58,415 [DEBUG]    utils.py.execute [90] -- (0.054) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('otc_trade_detail',); args=['otc_trade_detail']
2023-10-17 21:04:58,446 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_trade_detail',); args=['otc_trade_detail']
2023-10-17 21:04:58,507 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_trade_detail',); args=['otc_trade_detail']
2023-10-17 21:04:58,560 [DEBUG]    utils.py.execute [90] -- (0.053) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('otc_trade_detail',); args=['otc_trade_detail']
2023-10-17 21:04:58,591 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('otc_trade_detail',); args=['otc_trade_detail']
2023-10-17 21:04:58,659 [DEBUG]    utils.py.execute [90] -- (0.037) QUERY = 'SELECT * FROM "OTC_TRADE_DETAIL" WHERE ROWNUM < 2 AND 1022 > 0' - PARAMS = (); args=None
2023-10-17 21:04:58,691 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('OTC_TRADING_DAY',); args=['OTC_TRADING_DAY']
2023-10-17 21:04:58,722 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_trading_day',); args=['otc_trading_day']
2023-10-17 21:04:58,787 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_trading_day',); args=['otc_trading_day']
2023-10-17 21:04:58,853 [DEBUG]    utils.py.execute [90] -- (0.067) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('otc_trading_day',); args=['otc_trading_day']
2023-10-17 21:04:58,885 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_trading_day',); args=['otc_trading_day']
2023-10-17 21:04:58,945 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_trading_day',); args=['otc_trading_day']
2023-10-17 21:04:59,009 [DEBUG]    utils.py.execute [90] -- (0.063) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('otc_trading_day',); args=['otc_trading_day']
2023-10-17 21:04:59,040 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('otc_trading_day',); args=['otc_trading_day']
2023-10-17 21:04:59,107 [DEBUG]    utils.py.execute [90] -- (0.037) QUERY = 'SELECT * FROM "OTC_TRADING_DAY" WHERE ROWNUM < 2 AND 1023 > 0' - PARAMS = (); args=None
2023-10-17 21:04:59,139 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('OTC_TRANSFER_DATA',); args=['OTC_TRANSFER_DATA']
2023-10-17 21:04:59,170 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_transfer_data',); args=['otc_transfer_data']
2023-10-17 21:04:59,231 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_transfer_data',); args=['otc_transfer_data']
2023-10-17 21:04:59,289 [DEBUG]    utils.py.execute [90] -- (0.057) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('otc_transfer_data',); args=['otc_transfer_data']
2023-10-17 21:04:59,321 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_transfer_data',); args=['otc_transfer_data']
2023-10-17 21:04:59,381 [DEBUG]    utils.py.execute [90] -- (0.029) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_transfer_data',); args=['otc_transfer_data']
2023-10-17 21:04:59,437 [DEBUG]    utils.py.execute [90] -- (0.055) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('otc_transfer_data',); args=['otc_transfer_data']
2023-10-17 21:04:59,468 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('otc_transfer_data',); args=['otc_transfer_data']
2023-10-17 21:04:59,537 [DEBUG]    utils.py.execute [90] -- (0.037) QUERY = 'SELECT * FROM "OTC_TRANSFER_DATA" WHERE ROWNUM < 2 AND 1024 > 0' - PARAMS = (); args=None
2023-10-17 21:04:59,568 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('OTC_TRANSFER_DATA2',); args=['OTC_TRANSFER_DATA2']
2023-10-17 21:04:59,599 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_transfer_data2',); args=['otc_transfer_data2']
2023-10-17 21:04:59,662 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_transfer_data2',); args=['otc_transfer_data2']
2023-10-17 21:04:59,716 [DEBUG]    utils.py.execute [90] -- (0.054) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('otc_transfer_data2',); args=['otc_transfer_data2']
2023-10-17 21:04:59,748 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_transfer_data2',); args=['otc_transfer_data2']
2023-10-17 21:04:59,810 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_transfer_data2',); args=['otc_transfer_data2']
2023-10-17 21:04:59,863 [DEBUG]    utils.py.execute [90] -- (0.052) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('otc_transfer_data2',); args=['otc_transfer_data2']
2023-10-17 21:04:59,893 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('otc_transfer_data2',); args=['otc_transfer_data2']
2023-10-17 21:04:59,965 [DEBUG]    utils.py.execute [90] -- (0.037) QUERY = 'SELECT * FROM "OTC_TRANSFER_DATA2" WHERE ROWNUM < 2 AND 1025 > 0' - PARAMS = (); args=None
2023-10-17 21:04:59,995 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('OTC_TRANSFERORDER_FLOW',); args=['OTC_TRANSFERORDER_FLOW']
2023-10-17 21:05:00,028 [DEBUG]    utils.py.execute [90] -- (0.033) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_transferorder_flow',); args=['otc_transferorder_flow']
2023-10-17 21:05:00,091 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_transferorder_flow',); args=['otc_transferorder_flow']
2023-10-17 21:05:00,149 [DEBUG]    utils.py.execute [90] -- (0.057) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('otc_transferorder_flow',); args=['otc_transferorder_flow']
2023-10-17 21:05:00,179 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_transferorder_flow',); args=['otc_transferorder_flow']
2023-10-17 21:05:00,240 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_transferorder_flow',); args=['otc_transferorder_flow']
2023-10-17 21:05:00,293 [DEBUG]    utils.py.execute [90] -- (0.053) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('otc_transferorder_flow',); args=['otc_transferorder_flow']
2023-10-17 21:05:00,323 [DEBUG]    utils.py.execute [90] -- (0.029) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('otc_transferorder_flow',); args=['otc_transferorder_flow']
2023-10-17 21:05:00,404 [DEBUG]    utils.py.execute [90] -- (0.049) QUERY = 'SELECT * FROM "OTC_TRANSFERORDER_FLOW" WHERE ROWNUM < 2 AND 1026 > 0' - PARAMS = (); args=None
2023-10-17 21:05:00,439 [DEBUG]    utils.py.execute [90] -- (0.034) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('OTC_TRS',); args=['OTC_TRS']
2023-10-17 21:05:00,470 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_trs',); args=['otc_trs']
2023-10-17 21:05:00,530 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_trs',); args=['otc_trs']
2023-10-17 21:05:00,585 [DEBUG]    utils.py.execute [90] -- (0.054) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('otc_trs',); args=['otc_trs']
2023-10-17 21:05:00,616 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_trs',); args=['otc_trs']
2023-10-17 21:05:00,677 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_trs',); args=['otc_trs']
2023-10-17 21:05:00,729 [DEBUG]    utils.py.execute [90] -- (0.052) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('otc_trs',); args=['otc_trs']
2023-10-17 21:05:00,760 [DEBUG]    utils.py.execute [90] -- (0.029) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('otc_trs',); args=['otc_trs']
2023-10-17 21:05:00,828 [DEBUG]    utils.py.execute [90] -- (0.038) QUERY = 'SELECT * FROM "OTC_TRS" WHERE ROWNUM < 2 AND 1027 > 0' - PARAMS = (); args=None
2023-10-17 21:05:00,860 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('OTC_TRS_CBMK',); args=['OTC_TRS_CBMK']
2023-10-17 21:05:00,889 [DEBUG]    utils.py.execute [90] -- (0.029) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_trs_cbmk',); args=['otc_trs_cbmk']
2023-10-17 21:05:00,951 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_trs_cbmk',); args=['otc_trs_cbmk']
2023-10-17 21:05:01,007 [DEBUG]    utils.py.execute [90] -- (0.055) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('otc_trs_cbmk',); args=['otc_trs_cbmk']
2023-10-17 21:05:01,038 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_trs_cbmk',); args=['otc_trs_cbmk']
2023-10-17 21:05:01,098 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_trs_cbmk',); args=['otc_trs_cbmk']
2023-10-17 21:05:01,153 [DEBUG]    utils.py.execute [90] -- (0.054) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('otc_trs_cbmk',); args=['otc_trs_cbmk']
2023-10-17 21:05:01,183 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('otc_trs_cbmk',); args=['otc_trs_cbmk']
2023-10-17 21:05:01,250 [DEBUG]    utils.py.execute [90] -- (0.036) QUERY = 'SELECT * FROM "OTC_TRS_CBMK" WHERE ROWNUM < 2 AND 1028 > 0' - PARAMS = (); args=None
2023-10-17 21:05:01,283 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('OTC_TRS_CROSS_BORDER',); args=['OTC_TRS_CROSS_BORDER']
2023-10-17 21:05:01,315 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_trs_cross_border',); args=['otc_trs_cross_border']
2023-10-17 21:05:01,375 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_trs_cross_border',); args=['otc_trs_cross_border']
2023-10-17 21:05:01,431 [DEBUG]    utils.py.execute [90] -- (0.055) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('otc_trs_cross_border',); args=['otc_trs_cross_border']
2023-10-17 21:05:01,462 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_trs_cross_border',); args=['otc_trs_cross_border']
2023-10-17 21:05:01,523 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_trs_cross_border',); args=['otc_trs_cross_border']
2023-10-17 21:05:01,577 [DEBUG]    utils.py.execute [90] -- (0.053) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('otc_trs_cross_border',); args=['otc_trs_cross_border']
2023-10-17 21:05:01,609 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('otc_trs_cross_border',); args=['otc_trs_cross_border']
2023-10-17 21:05:01,680 [DEBUG]    utils.py.execute [90] -- (0.035) QUERY = 'SELECT * FROM "OTC_TRS_CROSS_BORDER" WHERE ROWNUM < 2 AND 1029 > 0' - PARAMS = (); args=None
2023-10-17 21:05:01,712 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('OTC_TRS_PNL',); args=['OTC_TRS_PNL']
2023-10-17 21:05:01,743 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_trs_pnl',); args=['otc_trs_pnl']
2023-10-17 21:05:01,774 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_trs_pnl',); args=['otc_trs_pnl']
2023-10-17 21:05:01,807 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('otc_trs_pnl',); args=['otc_trs_pnl']
2023-10-17 21:05:01,837 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_trs_pnl',); args=['otc_trs_pnl']
2023-10-17 21:05:01,868 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_trs_pnl',); args=['otc_trs_pnl']
2023-10-17 21:05:01,900 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('otc_trs_pnl',); args=['otc_trs_pnl']
2023-10-17 21:05:01,930 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('otc_trs_pnl',); args=['otc_trs_pnl']
2023-10-17 21:05:01,994 [DEBUG]    utils.py.execute [90] -- (0.033) QUERY = 'SELECT * FROM "OTC_TRS_PNL" WHERE ROWNUM < 2 AND 1030 > 0' - PARAMS = (); args=None
2023-10-17 21:05:02,025 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('OTC_TRS_RET',); args=['OTC_TRS_RET']
2023-10-17 21:05:02,055 [DEBUG]    utils.py.execute [90] -- (0.029) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_trs_ret',); args=['otc_trs_ret']
2023-10-17 21:05:02,116 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_trs_ret',); args=['otc_trs_ret']
2023-10-17 21:05:02,169 [DEBUG]    utils.py.execute [90] -- (0.054) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('otc_trs_ret',); args=['otc_trs_ret']
2023-10-17 21:05:02,202 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_trs_ret',); args=['otc_trs_ret']
2023-10-17 21:05:02,262 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_trs_ret',); args=['otc_trs_ret']
2023-10-17 21:05:02,316 [DEBUG]    utils.py.execute [90] -- (0.052) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('otc_trs_ret',); args=['otc_trs_ret']
2023-10-17 21:05:02,348 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('otc_trs_ret',); args=['otc_trs_ret']
2023-10-17 21:05:02,410 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = 'SELECT * FROM "OTC_TRS_RET" WHERE ROWNUM < 2 AND 1031 > 0' - PARAMS = (); args=None
2023-10-17 21:05:02,442 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('OTC_UNUSUAL_OFFER_WARN',); args=['OTC_UNUSUAL_OFFER_WARN']
2023-10-17 21:05:02,473 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_unusual_offer_warn',); args=['otc_unusual_offer_warn']
2023-10-17 21:05:02,536 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_unusual_offer_warn',); args=['otc_unusual_offer_warn']
2023-10-17 21:05:02,606 [DEBUG]    utils.py.execute [90] -- (0.068) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('otc_unusual_offer_warn',); args=['otc_unusual_offer_warn']
2023-10-17 21:05:02,669 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_unusual_offer_warn',); args=['otc_unusual_offer_warn']
2023-10-17 21:05:02,730 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_unusual_offer_warn',); args=['otc_unusual_offer_warn']
2023-10-17 21:05:02,802 [DEBUG]    utils.py.execute [90] -- (0.071) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('otc_unusual_offer_warn',); args=['otc_unusual_offer_warn']
2023-10-17 21:05:02,861 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('otc_unusual_offer_warn',); args=['otc_unusual_offer_warn']
2023-10-17 21:05:02,928 [DEBUG]    utils.py.execute [90] -- (0.034) QUERY = 'SELECT * FROM "OTC_UNUSUAL_OFFER_WARN" WHERE ROWNUM < 2 AND 1032 > 0' - PARAMS = (); args=None
2023-10-17 21:05:02,959 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('OTC_URL_ANALYSE',); args=['OTC_URL_ANALYSE']
2023-10-17 21:05:02,989 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_url_analyse',); args=['otc_url_analyse']
2023-10-17 21:05:03,021 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_url_analyse',); args=['otc_url_analyse']
2023-10-17 21:05:03,053 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('otc_url_analyse',); args=['otc_url_analyse']
2023-10-17 21:05:03,085 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_url_analyse',); args=['otc_url_analyse']
2023-10-17 21:05:03,115 [DEBUG]    utils.py.execute [90] -- (0.029) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_url_analyse',); args=['otc_url_analyse']
2023-10-17 21:05:03,147 [DEBUG]    utils.py.execute [90] -- (0.033) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('otc_url_analyse',); args=['otc_url_analyse']
2023-10-17 21:05:03,178 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('otc_url_analyse',); args=['otc_url_analyse']
2023-10-17 21:05:03,246 [DEBUG]    utils.py.execute [90] -- (0.036) QUERY = 'SELECT * FROM "OTC_URL_ANALYSE" WHERE ROWNUM < 2 AND 1033 > 0' - PARAMS = (); args=None
2023-10-17 21:05:03,277 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('OTC_USER_PRODUCT',); args=['OTC_USER_PRODUCT']
2023-10-17 21:05:03,308 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_user_product',); args=['otc_user_product']
2023-10-17 21:05:03,339 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_user_product',); args=['otc_user_product']
2023-10-17 21:05:03,371 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('otc_user_product',); args=['otc_user_product']
2023-10-17 21:05:03,405 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_user_product',); args=['otc_user_product']
2023-10-17 21:05:03,435 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_user_product',); args=['otc_user_product']
2023-10-17 21:05:03,467 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('otc_user_product',); args=['otc_user_product']
2023-10-17 21:05:03,498 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('otc_user_product',); args=['otc_user_product']
2023-10-17 21:05:03,563 [DEBUG]    utils.py.execute [90] -- (0.033) QUERY = 'SELECT * FROM "OTC_USER_PRODUCT" WHERE ROWNUM < 2 AND 1034 > 0' - PARAMS = (); args=None
2023-10-17 21:05:03,594 [DEBUG]    utils.py.execute [90] -- (0.029) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('OTC_WECHAT_REMIND_USER',); args=['OTC_WECHAT_REMIND_USER']
2023-10-17 21:05:03,626 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_wechat_remind_user',); args=['otc_wechat_remind_user']
2023-10-17 21:05:03,656 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_wechat_remind_user',); args=['otc_wechat_remind_user']
2023-10-17 21:05:03,688 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('otc_wechat_remind_user',); args=['otc_wechat_remind_user']
2023-10-17 21:05:03,718 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_wechat_remind_user',); args=['otc_wechat_remind_user']
2023-10-17 21:05:03,749 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_wechat_remind_user',); args=['otc_wechat_remind_user']
2023-10-17 21:05:03,781 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('otc_wechat_remind_user',); args=['otc_wechat_remind_user']
2023-10-17 21:05:03,811 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('otc_wechat_remind_user',); args=['otc_wechat_remind_user']
2023-10-17 21:05:03,875 [DEBUG]    utils.py.execute [90] -- (0.034) QUERY = 'SELECT * FROM "OTC_WECHAT_REMIND_USER" WHERE ROWNUM < 2 AND 1035 > 0' - PARAMS = (); args=None
2023-10-17 21:05:03,906 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('OTC_WECHAT_SEND_LOGS',); args=['OTC_WECHAT_SEND_LOGS']
2023-10-17 21:05:03,937 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_wechat_send_logs',); args=['otc_wechat_send_logs']
2023-10-17 21:05:03,970 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_wechat_send_logs',); args=['otc_wechat_send_logs']
2023-10-17 21:05:04,002 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('otc_wechat_send_logs',); args=['otc_wechat_send_logs']
2023-10-17 21:05:04,032 [DEBUG]    utils.py.execute [90] -- (0.029) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_wechat_send_logs',); args=['otc_wechat_send_logs']
2023-10-17 21:05:04,064 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_wechat_send_logs',); args=['otc_wechat_send_logs']
2023-10-17 21:05:04,097 [DEBUG]    utils.py.execute [90] -- (0.033) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('otc_wechat_send_logs',); args=['otc_wechat_send_logs']
2023-10-17 21:05:04,128 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('otc_wechat_send_logs',); args=['otc_wechat_send_logs']
2023-10-17 21:05:04,191 [DEBUG]    utils.py.execute [90] -- (0.033) QUERY = 'SELECT * FROM "OTC_WECHAT_SEND_LOGS" WHERE ROWNUM < 2 AND 1036 > 0' - PARAMS = (); args=None
2023-10-17 21:05:04,222 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('OTC_WECHAT_SEND_PROD_LOGS',); args=['OTC_WECHAT_SEND_PROD_LOGS']
2023-10-17 21:05:04,252 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_wechat_send_prod_logs',); args=['otc_wechat_send_prod_logs']
2023-10-17 21:05:04,283 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_wechat_send_prod_logs',); args=['otc_wechat_send_prod_logs']
2023-10-17 21:05:04,315 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('otc_wechat_send_prod_logs',); args=['otc_wechat_send_prod_logs']
2023-10-17 21:05:04,346 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_wechat_send_prod_logs',); args=['otc_wechat_send_prod_logs']
2023-10-17 21:05:04,378 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_wechat_send_prod_logs',); args=['otc_wechat_send_prod_logs']
2023-10-17 21:05:04,410 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('otc_wechat_send_prod_logs',); args=['otc_wechat_send_prod_logs']
2023-10-17 21:05:04,440 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('otc_wechat_send_prod_logs',); args=['otc_wechat_send_prod_logs']
2023-10-17 21:05:04,506 [DEBUG]    utils.py.execute [90] -- (0.036) QUERY = 'SELECT * FROM "OTC_WECHAT_SEND_PROD_LOGS" WHERE ROWNUM < 2 AND 1037 > 0' - PARAMS = (); args=None
2023-10-17 21:05:04,536 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('OTC_WEIXIN',); args=['OTC_WEIXIN']
2023-10-17 21:05:04,567 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_weixin',); args=['otc_weixin']
2023-10-17 21:05:04,627 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_weixin',); args=['otc_weixin']
2023-10-17 21:05:04,684 [DEBUG]    utils.py.execute [90] -- (0.057) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('otc_weixin',); args=['otc_weixin']
2023-10-17 21:05:04,715 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_weixin',); args=['otc_weixin']
2023-10-17 21:05:04,776 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otc_weixin',); args=['otc_weixin']
2023-10-17 21:05:04,829 [DEBUG]    utils.py.execute [90] -- (0.052) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('otc_weixin',); args=['otc_weixin']
2023-10-17 21:05:04,859 [DEBUG]    utils.py.execute [90] -- (0.029) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('otc_weixin',); args=['otc_weixin']
2023-10-17 21:05:04,925 [DEBUG]    utils.py.execute [90] -- (0.036) QUERY = 'SELECT * FROM "OTC_WEIXIN" WHERE ROWNUM < 2 AND 1038 > 0' - PARAMS = (); args=None
2023-10-17 21:05:04,956 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('OTCISP_ROLE',); args=['OTCISP_ROLE']
2023-10-17 21:05:04,987 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otcisp_role',); args=['otcisp_role']
2023-10-17 21:05:05,019 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otcisp_role',); args=['otcisp_role']
2023-10-17 21:05:05,113 [DEBUG]    utils.py.execute [90] -- (0.093) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('otcisp_role',); args=['otcisp_role']
2023-10-17 21:05:05,143 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otcisp_role',); args=['otcisp_role']
2023-10-17 21:05:05,174 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otcisp_role',); args=['otcisp_role']
2023-10-17 21:05:05,207 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('otcisp_role',); args=['otcisp_role']
2023-10-17 21:05:05,239 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('otcisp_role',); args=['otcisp_role']
2023-10-17 21:05:05,305 [DEBUG]    utils.py.execute [90] -- (0.034) QUERY = 'SELECT * FROM "OTCISP_ROLE" WHERE ROWNUM < 2 AND 1039 > 0' - PARAMS = (); args=None
2023-10-17 21:05:05,337 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('OTCISP_USERROLE',); args=['OTCISP_USERROLE']
2023-10-17 21:05:05,368 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otcisp_userrole',); args=['otcisp_userrole']
2023-10-17 21:05:05,401 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otcisp_userrole',); args=['otcisp_userrole']
2023-10-17 21:05:05,433 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('otcisp_userrole',); args=['otcisp_userrole']
2023-10-17 21:05:05,464 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otcisp_userrole',); args=['otcisp_userrole']
2023-10-17 21:05:05,495 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otcisp_userrole',); args=['otcisp_userrole']
2023-10-17 21:05:05,527 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('otcisp_userrole',); args=['otcisp_userrole']
2023-10-17 21:05:05,559 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('otcisp_userrole',); args=['otcisp_userrole']
2023-10-17 21:05:05,622 [DEBUG]    utils.py.execute [90] -- (0.033) QUERY = 'SELECT * FROM "OTCISP_USERROLE" WHERE ROWNUM < 2 AND 1040 > 0' - PARAMS = (); args=None
2023-10-17 21:05:05,651 [DEBUG]    utils.py.execute [90] -- (0.029) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('OTCWEB_BANKACCOUNTINFO',); args=['OTCWEB_BANKACCOUNTINFO']
2023-10-17 21:05:05,683 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otcweb_bankaccountinfo',); args=['otcweb_bankaccountinfo']
2023-10-17 21:05:05,717 [DEBUG]    utils.py.execute [90] -- (0.033) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otcweb_bankaccountinfo',); args=['otcweb_bankaccountinfo']
2023-10-17 21:05:05,751 [DEBUG]    utils.py.execute [90] -- (0.033) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('otcweb_bankaccountinfo',); args=['otcweb_bankaccountinfo']
2023-10-17 21:05:05,781 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otcweb_bankaccountinfo',); args=['otcweb_bankaccountinfo']
2023-10-17 21:05:05,812 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otcweb_bankaccountinfo',); args=['otcweb_bankaccountinfo']
2023-10-17 21:05:05,846 [DEBUG]    utils.py.execute [90] -- (0.033) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('otcweb_bankaccountinfo',); args=['otcweb_bankaccountinfo']
2023-10-17 21:05:05,876 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('otcweb_bankaccountinfo',); args=['otcweb_bankaccountinfo']
2023-10-17 21:05:05,941 [DEBUG]    utils.py.execute [90] -- (0.033) QUERY = 'SELECT * FROM "OTCWEB_BANKACCOUNTINFO" WHERE ROWNUM < 2 AND 1041 > 0' - PARAMS = (); args=None
2023-10-17 21:05:05,972 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('OTCZHYW_DATA',); args=['OTCZHYW_DATA']
2023-10-17 21:05:06,001 [DEBUG]    utils.py.execute [90] -- (0.029) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otczhyw_data',); args=['otczhyw_data']
2023-10-17 21:05:06,032 [DEBUG]    utils.py.execute [90] -- (0.029) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otczhyw_data',); args=['otczhyw_data']
2023-10-17 21:05:06,064 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('otczhyw_data',); args=['otczhyw_data']
2023-10-17 21:05:06,095 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otczhyw_data',); args=['otczhyw_data']
2023-10-17 21:05:06,127 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('otczhyw_data',); args=['otczhyw_data']
2023-10-17 21:05:06,159 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('otczhyw_data',); args=['otczhyw_data']
2023-10-17 21:05:06,190 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('otczhyw_data',); args=['otczhyw_data']
2023-10-17 21:05:06,256 [DEBUG]    utils.py.execute [90] -- (0.036) QUERY = 'SELECT * FROM "OTCZHYW_DATA" WHERE ROWNUM < 2 AND 1042 > 0' - PARAMS = (); args=None
2023-10-17 21:05:06,287 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('OTS_ATTACHMENT',); args=['OTS_ATTACHMENT']
2023-10-17 21:05:06,319 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('ots_attachment',); args=['ots_attachment']
2023-10-17 21:05:06,379 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('ots_attachment',); args=['ots_attachment']
2023-10-17 21:05:06,437 [DEBUG]    utils.py.execute [90] -- (0.057) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('ots_attachment',); args=['ots_attachment']
2023-10-17 21:05:06,469 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('ots_attachment',); args=['ots_attachment']
2023-10-17 21:05:06,530 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('ots_attachment',); args=['ots_attachment']
2023-10-17 21:05:06,582 [DEBUG]    utils.py.execute [90] -- (0.053) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('ots_attachment',); args=['ots_attachment']
2023-10-17 21:05:06,613 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('ots_attachment',); args=['ots_attachment']
2023-10-17 21:05:06,683 [DEBUG]    utils.py.execute [90] -- (0.038) QUERY = 'SELECT * FROM "OTS_ATTACHMENT" WHERE ROWNUM < 2 AND 1043 > 0' - PARAMS = (); args=None
2023-10-17 21:05:06,715 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('P_R_INTERNAL_ID',); args=['P_R_INTERNAL_ID']
2023-10-17 21:05:06,746 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('p_r_internal_id',); args=['p_r_internal_id']
2023-10-17 21:05:06,807 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('p_r_internal_id',); args=['p_r_internal_id']
2023-10-17 21:05:06,869 [DEBUG]    utils.py.execute [90] -- (0.063) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('p_r_internal_id',); args=['p_r_internal_id']
2023-10-17 21:05:06,899 [DEBUG]    utils.py.execute [90] -- (0.029) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('p_r_internal_id',); args=['p_r_internal_id']
2023-10-17 21:05:06,960 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('p_r_internal_id',); args=['p_r_internal_id']
2023-10-17 21:05:07,015 [DEBUG]    utils.py.execute [90] -- (0.055) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('p_r_internal_id',); args=['p_r_internal_id']
2023-10-17 21:05:07,045 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('p_r_internal_id',); args=['p_r_internal_id']
2023-10-17 21:05:07,111 [DEBUG]    utils.py.execute [90] -- (0.036) QUERY = 'SELECT * FROM "P_R_INTERNAL_ID" WHERE ROWNUM < 2 AND 1044 > 0' - PARAMS = (); args=None
2023-10-17 21:05:07,142 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('PART1',); args=['PART1']
2023-10-17 21:05:07,174 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('part1',); args=['part1']
2023-10-17 21:05:07,207 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('part1',); args=['part1']
2023-10-17 21:05:07,240 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('part1',); args=['part1']
2023-10-17 21:05:07,270 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('part1',); args=['part1']
2023-10-17 21:05:07,302 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('part1',); args=['part1']
2023-10-17 21:05:07,334 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('part1',); args=['part1']
2023-10-17 21:05:07,365 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('part1',); args=['part1']
2023-10-17 21:05:07,428 [DEBUG]    utils.py.execute [90] -- (0.034) QUERY = 'SELECT * FROM "PART1" WHERE ROWNUM < 2 AND 1045 > 0' - PARAMS = (); args=None
2023-10-17 21:05:07,459 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('PERFORMANCE_AGREEMENT_NO',); args=['PERFORMANCE_AGREEMENT_NO']
2023-10-17 21:05:07,490 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('performance_agreement_no',); args=['performance_agreement_no']
2023-10-17 21:05:07,521 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('performance_agreement_no',); args=['performance_agreement_no']
2023-10-17 21:05:07,555 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('performance_agreement_no',); args=['performance_agreement_no']
2023-10-17 21:05:07,585 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('performance_agreement_no',); args=['performance_agreement_no']
2023-10-17 21:05:07,616 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('performance_agreement_no',); args=['performance_agreement_no']
2023-10-17 21:05:07,649 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('performance_agreement_no',); args=['performance_agreement_no']
2023-10-17 21:05:07,680 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('performance_agreement_no',); args=['performance_agreement_no']
2023-10-17 21:05:07,746 [DEBUG]    utils.py.execute [90] -- (0.033) QUERY = 'SELECT * FROM "PERFORMANCE_AGREEMENT_NO" WHERE ROWNUM < 2 AND 1046 > 0' - PARAMS = (); args=None
2023-10-17 21:05:07,777 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('PERSON',); args=['PERSON']
2023-10-17 21:05:07,812 [DEBUG]    utils.py.execute [90] -- (0.034) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('person',); args=['person']
2023-10-17 21:05:07,872 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('person',); args=['person']
2023-10-17 21:05:07,930 [DEBUG]    utils.py.execute [90] -- (0.058) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('person',); args=['person']
2023-10-17 21:05:07,960 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('person',); args=['person']
2023-10-17 21:05:08,023 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('person',); args=['person']
2023-10-17 21:05:08,080 [DEBUG]    utils.py.execute [90] -- (0.057) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('person',); args=['person']
2023-10-17 21:05:08,111 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('person',); args=['person']
2023-10-17 21:05:08,178 [DEBUG]    utils.py.execute [90] -- (0.036) QUERY = 'SELECT * FROM "PERSON" WHERE ROWNUM < 2 AND 1047 > 0' - PARAMS = (); args=None
2023-10-17 21:05:08,209 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('PL_REPORT_DETAIL',); args=['PL_REPORT_DETAIL']
2023-10-17 21:05:08,240 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('pl_report_detail',); args=['pl_report_detail']
2023-10-17 21:05:08,271 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('pl_report_detail',); args=['pl_report_detail']
2023-10-17 21:05:08,307 [DEBUG]    utils.py.execute [90] -- (0.035) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('pl_report_detail',); args=['pl_report_detail']
2023-10-17 21:05:08,339 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('pl_report_detail',); args=['pl_report_detail']
2023-10-17 21:05:08,370 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('pl_report_detail',); args=['pl_report_detail']
2023-10-17 21:05:08,402 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('pl_report_detail',); args=['pl_report_detail']
2023-10-17 21:05:08,433 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('pl_report_detail',); args=['pl_report_detail']
2023-10-17 21:05:08,501 [DEBUG]    utils.py.execute [90] -- (0.036) QUERY = 'SELECT * FROM "PL_REPORT_DETAIL" WHERE ROWNUM < 2 AND 1048 > 0' - PARAMS = (); args=None
2023-10-17 21:05:08,533 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('PLSQL_PROFILER_DATA',); args=['PLSQL_PROFILER_DATA']
2023-10-17 21:05:08,597 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('plsql_profiler_data',); args=['plsql_profiler_data']
2023-10-17 21:05:08,663 [DEBUG]    utils.py.execute [90] -- (0.033) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('plsql_profiler_data',); args=['plsql_profiler_data']
2023-10-17 21:05:08,750 [DEBUG]    utils.py.execute [90] -- (0.056) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('plsql_profiler_data',); args=['plsql_profiler_data']
2023-10-17 21:05:08,781 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('plsql_profiler_data',); args=['plsql_profiler_data']
2023-10-17 21:05:08,844 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('plsql_profiler_data',); args=['plsql_profiler_data']
2023-10-17 21:05:08,929 [DEBUG]    utils.py.execute [90] -- (0.053) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('plsql_profiler_data',); args=['plsql_profiler_data']
2023-10-17 21:05:08,959 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('plsql_profiler_data',); args=['plsql_profiler_data']
2023-10-17 21:05:09,029 [DEBUG]    utils.py.execute [90] -- (0.038) QUERY = 'SELECT * FROM "PLSQL_PROFILER_DATA" WHERE ROWNUM < 2 AND 1049 > 0' - PARAMS = (); args=None
2023-10-17 21:05:09,060 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('PLSQL_PROFILER_RUNS',); args=['PLSQL_PROFILER_RUNS']
2023-10-17 21:05:09,091 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('plsql_profiler_runs',); args=['plsql_profiler_runs']
2023-10-17 21:05:09,123 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('plsql_profiler_runs',); args=['plsql_profiler_runs']
2023-10-17 21:05:09,182 [DEBUG]    utils.py.execute [90] -- (0.060) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('plsql_profiler_runs',); args=['plsql_profiler_runs']
2023-10-17 21:05:09,214 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('plsql_profiler_runs',); args=['plsql_profiler_runs']
2023-10-17 21:05:09,246 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('plsql_profiler_runs',); args=['plsql_profiler_runs']
2023-10-17 21:05:09,300 [DEBUG]    utils.py.execute [90] -- (0.055) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('plsql_profiler_runs',); args=['plsql_profiler_runs']
2023-10-17 21:05:09,334 [DEBUG]    utils.py.execute [90] -- (0.033) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('plsql_profiler_runs',); args=['plsql_profiler_runs']
2023-10-17 21:05:09,401 [DEBUG]    utils.py.execute [90] -- (0.037) QUERY = 'SELECT * FROM "PLSQL_PROFILER_RUNS" WHERE ROWNUM < 2 AND 1050 > 0' - PARAMS = (); args=None
2023-10-17 21:05:09,433 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('PLSQL_PROFILER_UNITS',); args=['PLSQL_PROFILER_UNITS']
2023-10-17 21:05:09,465 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('plsql_profiler_units',); args=['plsql_profiler_units']
2023-10-17 21:05:09,532 [DEBUG]    utils.py.execute [90] -- (0.034) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('plsql_profiler_units',); args=['plsql_profiler_units']
2023-10-17 21:05:09,588 [DEBUG]    utils.py.execute [90] -- (0.056) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('plsql_profiler_units',); args=['plsql_profiler_units']
2023-10-17 21:05:09,619 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('plsql_profiler_units',); args=['plsql_profiler_units']
2023-10-17 21:05:09,680 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('plsql_profiler_units',); args=['plsql_profiler_units']
2023-10-17 21:05:09,735 [DEBUG]    utils.py.execute [90] -- (0.054) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('plsql_profiler_units',); args=['plsql_profiler_units']
2023-10-17 21:05:09,765 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('plsql_profiler_units',); args=['plsql_profiler_units']
2023-10-17 21:05:09,834 [DEBUG]    utils.py.execute [90] -- (0.038) QUERY = 'SELECT * FROM "PLSQL_PROFILER_UNITS" WHERE ROWNUM < 2 AND 1051 > 0' - PARAMS = (); args=None
2023-10-17 21:05:09,865 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('PORTAL_JOB',); args=['PORTAL_JOB']
2023-10-17 21:05:09,897 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('portal_job',); args=['portal_job']
2023-10-17 21:05:09,957 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('portal_job',); args=['portal_job']
2023-10-17 21:05:10,014 [DEBUG]    utils.py.execute [90] -- (0.056) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('portal_job',); args=['portal_job']
2023-10-17 21:05:10,044 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('portal_job',); args=['portal_job']
2023-10-17 21:05:10,106 [DEBUG]    utils.py.execute [90] -- (0.029) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('portal_job',); args=['portal_job']
2023-10-17 21:05:10,159 [DEBUG]    utils.py.execute [90] -- (0.054) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('portal_job',); args=['portal_job']
2023-10-17 21:05:10,190 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('portal_job',); args=['portal_job']
2023-10-17 21:05:10,257 [DEBUG]    utils.py.execute [90] -- (0.037) QUERY = 'SELECT * FROM "PORTAL_JOB" WHERE ROWNUM < 2 AND 1052 > 0' - PARAMS = (); args=None
2023-10-17 21:05:10,288 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('PPROVAL_PROCESS_230529',); args=['PPROVAL_PROCESS_230529']
2023-10-17 21:05:10,320 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('pproval_process_230529',); args=['pproval_process_230529']
2023-10-17 21:05:10,350 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('pproval_process_230529',); args=['pproval_process_230529']
2023-10-17 21:05:10,382 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('pproval_process_230529',); args=['pproval_process_230529']
2023-10-17 21:05:10,415 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('pproval_process_230529',); args=['pproval_process_230529']
2023-10-17 21:05:10,447 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('pproval_process_230529',); args=['pproval_process_230529']
2023-10-17 21:05:10,480 [DEBUG]    utils.py.execute [90] -- (0.033) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('pproval_process_230529',); args=['pproval_process_230529']
2023-10-17 21:05:10,510 [DEBUG]    utils.py.execute [90] -- (0.029) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('pproval_process_230529',); args=['pproval_process_230529']
2023-10-17 21:05:10,575 [DEBUG]    utils.py.execute [90] -- (0.035) QUERY = 'SELECT * FROM "PPROVAL_PROCESS_230529" WHERE ROWNUM < 2 AND 1053 > 0' - PARAMS = (); args=None
2023-10-17 21:05:10,608 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('PRD_FUND_NAV_H',); args=['PRD_FUND_NAV_H']
2023-10-17 21:05:10,639 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('prd_fund_nav_h',); args=['prd_fund_nav_h']
2023-10-17 21:05:10,670 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('prd_fund_nav_h',); args=['prd_fund_nav_h']
2023-10-17 21:05:10,703 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('prd_fund_nav_h',); args=['prd_fund_nav_h']
2023-10-17 21:05:10,737 [DEBUG]    utils.py.execute [90] -- (0.034) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('prd_fund_nav_h',); args=['prd_fund_nav_h']
2023-10-17 21:05:10,768 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('prd_fund_nav_h',); args=['prd_fund_nav_h']
2023-10-17 21:05:10,801 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('prd_fund_nav_h',); args=['prd_fund_nav_h']
2023-10-17 21:05:10,830 [DEBUG]    utils.py.execute [90] -- (0.029) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('prd_fund_nav_h',); args=['prd_fund_nav_h']
2023-10-17 21:05:10,896 [DEBUG]    utils.py.execute [90] -- (0.033) QUERY = 'SELECT * FROM "PRD_FUND_NAV_H" WHERE ROWNUM < 2 AND 1054 > 0' - PARAMS = (); args=None
2023-10-17 21:05:10,926 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('PRD_NAME_H',); args=['PRD_NAME_H']
2023-10-17 21:05:10,956 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('prd_name_h',); args=['prd_name_h']
2023-10-17 21:05:10,991 [DEBUG]    utils.py.execute [90] -- (0.034) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('prd_name_h',); args=['prd_name_h']
2023-10-17 21:05:11,024 [DEBUG]    utils.py.execute [90] -- (0.033) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('prd_name_h',); args=['prd_name_h']
2023-10-17 21:05:11,055 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('prd_name_h',); args=['prd_name_h']
2023-10-17 21:05:11,093 [DEBUG]    utils.py.execute [90] -- (0.037) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('prd_name_h',); args=['prd_name_h']
2023-10-17 21:05:11,125 [DEBUG]    utils.py.execute [90] -- (0.033) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('prd_name_h',); args=['prd_name_h']
2023-10-17 21:05:11,155 [DEBUG]    utils.py.execute [90] -- (0.029) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('prd_name_h',); args=['prd_name_h']
2023-10-17 21:05:11,220 [DEBUG]    utils.py.execute [90] -- (0.033) QUERY = 'SELECT * FROM "PRD_NAME_H" WHERE ROWNUM < 2 AND 1055 > 0' - PARAMS = (); args=None
2023-10-17 21:05:11,253 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('PRD_PROD_INFO',); args=['PRD_PROD_INFO']
2023-10-17 21:05:11,285 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('prd_prod_info',); args=['prd_prod_info']
2023-10-17 21:05:11,315 [DEBUG]    utils.py.execute [90] -- (0.029) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('prd_prod_info',); args=['prd_prod_info']
2023-10-17 21:05:11,349 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('prd_prod_info',); args=['prd_prod_info']
2023-10-17 21:05:11,380 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('prd_prod_info',); args=['prd_prod_info']
2023-10-17 21:05:11,410 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('prd_prod_info',); args=['prd_prod_info']
2023-10-17 21:05:11,443 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('prd_prod_info',); args=['prd_prod_info']
2023-10-17 21:05:11,472 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('prd_prod_info',); args=['prd_prod_info']
2023-10-17 21:05:11,541 [DEBUG]    utils.py.execute [90] -- (0.037) QUERY = 'SELECT * FROM "PRD_PROD_INFO" WHERE ROWNUM < 2 AND 1056 > 0' - PARAMS = (); args=None
2023-10-17 21:05:11,574 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('PRINCIPAL_AREA',); args=['PRINCIPAL_AREA']
2023-10-17 21:05:11,605 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('principal_area',); args=['principal_area']
2023-10-17 21:05:11,636 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('principal_area',); args=['principal_area']
2023-10-17 21:05:11,669 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('principal_area',); args=['principal_area']
2023-10-17 21:05:11,700 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('principal_area',); args=['principal_area']
2023-10-17 21:05:11,731 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('principal_area',); args=['principal_area']
2023-10-17 21:05:11,765 [DEBUG]    utils.py.execute [90] -- (0.033) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('principal_area',); args=['principal_area']
2023-10-17 21:05:11,795 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('principal_area',); args=['principal_area']
2023-10-17 21:05:11,859 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = 'SELECT * FROM "PRINCIPAL_AREA" WHERE ROWNUM < 2 AND 1057 > 0' - PARAMS = (); args=None
2023-10-17 21:05:11,889 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('PRINCIPAL_AREA20190115',); args=['PRINCIPAL_AREA20190115']
2023-10-17 21:05:11,920 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('principal_area20190115',); args=['principal_area20190115']
2023-10-17 21:05:11,952 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('principal_area20190115',); args=['principal_area20190115']
2023-10-17 21:05:11,983 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('principal_area20190115',); args=['principal_area20190115']
2023-10-17 21:05:12,014 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('principal_area20190115',); args=['principal_area20190115']
2023-10-17 21:05:12,046 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('principal_area20190115',); args=['principal_area20190115']
2023-10-17 21:05:12,078 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('principal_area20190115',); args=['principal_area20190115']
2023-10-17 21:05:12,108 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('principal_area20190115',); args=['principal_area20190115']
2023-10-17 21:05:12,174 [DEBUG]    utils.py.execute [90] -- (0.034) QUERY = 'SELECT * FROM "PRINCIPAL_AREA20190115" WHERE ROWNUM < 2 AND 1058 > 0' - PARAMS = (); args=None
2023-10-17 21:05:12,205 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('PRINCIPAL_AREA20190424',); args=['PRINCIPAL_AREA20190424']
2023-10-17 21:05:12,236 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('principal_area20190424',); args=['principal_area20190424']
2023-10-17 21:05:12,267 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('principal_area20190424',); args=['principal_area20190424']
2023-10-17 21:05:12,300 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('principal_area20190424',); args=['principal_area20190424']
2023-10-17 21:05:12,330 [DEBUG]    utils.py.execute [90] -- (0.029) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('principal_area20190424',); args=['principal_area20190424']
2023-10-17 21:05:12,362 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('principal_area20190424',); args=['principal_area20190424']
2023-10-17 21:05:12,395 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('principal_area20190424',); args=['principal_area20190424']
2023-10-17 21:05:12,426 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('principal_area20190424',); args=['principal_area20190424']
2023-10-17 21:05:12,487 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = 'SELECT * FROM "PRINCIPAL_AREA20190424" WHERE ROWNUM < 2 AND 1059 > 0' - PARAMS = (); args=None
2023-10-17 21:05:12,518 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('PROCESS_EXPIRED_REMIND',); args=['PROCESS_EXPIRED_REMIND']
2023-10-17 21:05:12,549 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('process_expired_remind',); args=['process_expired_remind']
2023-10-17 21:05:12,610 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('process_expired_remind',); args=['process_expired_remind']
2023-10-17 21:05:12,666 [DEBUG]    utils.py.execute [90] -- (0.056) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('process_expired_remind',); args=['process_expired_remind']
2023-10-17 21:05:12,698 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('process_expired_remind',); args=['process_expired_remind']
2023-10-17 21:05:12,758 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('process_expired_remind',); args=['process_expired_remind']
2023-10-17 21:05:12,811 [DEBUG]    utils.py.execute [90] -- (0.054) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('process_expired_remind',); args=['process_expired_remind']
2023-10-17 21:05:12,842 [DEBUG]    utils.py.execute [90] -- (0.029) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('process_expired_remind',); args=['process_expired_remind']
2023-10-17 21:05:12,906 [DEBUG]    utils.py.execute [90] -- (0.033) QUERY = 'SELECT * FROM "PROCESS_EXPIRED_REMIND" WHERE ROWNUM < 2 AND 1060 > 0' - PARAMS = (); args=None
2023-10-17 21:05:12,938 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('PROCESS_EXPIRED_REMIND0327',); args=['PROCESS_EXPIRED_REMIND0327']
2023-10-17 21:05:12,969 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('process_expired_remind0327',); args=['process_expired_remind0327']
2023-10-17 21:05:13,001 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('process_expired_remind0327',); args=['process_expired_remind0327']
2023-10-17 21:05:13,036 [DEBUG]    utils.py.execute [90] -- (0.034) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('process_expired_remind0327',); args=['process_expired_remind0327']
2023-10-17 21:05:13,067 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('process_expired_remind0327',); args=['process_expired_remind0327']
2023-10-17 21:05:13,098 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('process_expired_remind0327',); args=['process_expired_remind0327']
2023-10-17 21:05:13,131 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('process_expired_remind0327',); args=['process_expired_remind0327']
2023-10-17 21:05:13,162 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('process_expired_remind0327',); args=['process_expired_remind0327']
2023-10-17 21:05:13,227 [DEBUG]    utils.py.execute [90] -- (0.033) QUERY = 'SELECT * FROM "PROCESS_EXPIRED_REMIND0327" WHERE ROWNUM < 2 AND 1061 > 0' - PARAMS = (); args=None
2023-10-17 21:05:13,258 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('PROCESS_EXPIRED_REMIND0518',); args=['PROCESS_EXPIRED_REMIND0518']
2023-10-17 21:05:13,289 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('process_expired_remind0518',); args=['process_expired_remind0518']
2023-10-17 21:05:13,320 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('process_expired_remind0518',); args=['process_expired_remind0518']
2023-10-17 21:05:13,352 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('process_expired_remind0518',); args=['process_expired_remind0518']
2023-10-17 21:05:13,382 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('process_expired_remind0518',); args=['process_expired_remind0518']
2023-10-17 21:05:13,413 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('process_expired_remind0518',); args=['process_expired_remind0518']
2023-10-17 21:05:13,447 [DEBUG]    utils.py.execute [90] -- (0.033) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('process_expired_remind0518',); args=['process_expired_remind0518']
2023-10-17 21:05:13,479 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('process_expired_remind0518',); args=['process_expired_remind0518']
2023-10-17 21:05:13,544 [DEBUG]    utils.py.execute [90] -- (0.034) QUERY = 'SELECT * FROM "PROCESS_EXPIRED_REMIND0518" WHERE ROWNUM < 2 AND 1062 > 0' - PARAMS = (); args=None
2023-10-17 21:05:13,576 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('PROD_GF18',); args=['PROD_GF18']
2023-10-17 21:05:13,607 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('prod_gf18',); args=['prod_gf18']
2023-10-17 21:05:13,667 [DEBUG]    utils.py.execute [90] -- (0.029) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('prod_gf18',); args=['prod_gf18']
2023-10-17 21:05:13,700 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('prod_gf18',); args=['prod_gf18']
2023-10-17 21:05:13,732 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('prod_gf18',); args=['prod_gf18']
2023-10-17 21:05:13,793 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('prod_gf18',); args=['prod_gf18']
2023-10-17 21:05:13,824 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('prod_gf18',); args=['prod_gf18']
2023-10-17 21:05:13,854 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('prod_gf18',); args=['prod_gf18']
2023-10-17 21:05:13,919 [DEBUG]    utils.py.execute [90] -- (0.034) QUERY = 'SELECT * FROM "PROD_GF18" WHERE ROWNUM < 2 AND 1063 > 0' - PARAMS = (); args=None
2023-10-17 21:05:13,950 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('PROD_HTML',); args=['PROD_HTML']
2023-10-17 21:05:13,983 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('prod_html',); args=['prod_html']
2023-10-17 21:05:14,019 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('prod_html',); args=['prod_html']
2023-10-17 21:05:14,054 [DEBUG]    utils.py.execute [90] -- (0.034) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('prod_html',); args=['prod_html']
2023-10-17 21:05:14,084 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('prod_html',); args=['prod_html']
2023-10-17 21:05:14,116 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('prod_html',); args=['prod_html']
2023-10-17 21:05:14,149 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('prod_html',); args=['prod_html']
2023-10-17 21:05:14,180 [DEBUG]    utils.py.execute [90] -- (0.029) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('prod_html',); args=['prod_html']
2023-10-17 21:05:14,243 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = 'SELECT * FROM "PROD_HTML" WHERE ROWNUM < 2 AND 1064 > 0' - PARAMS = (); args=None
2023-10-17 21:05:14,274 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('PROD_NAV_INFO0327',); args=['PROD_NAV_INFO0327']
2023-10-17 21:05:14,304 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('prod_nav_info0327',); args=['prod_nav_info0327']
2023-10-17 21:05:14,334 [DEBUG]    utils.py.execute [90] -- (0.029) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('prod_nav_info0327',); args=['prod_nav_info0327']
2023-10-17 21:05:14,366 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('prod_nav_info0327',); args=['prod_nav_info0327']
2023-10-17 21:05:14,399 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('prod_nav_info0327',); args=['prod_nav_info0327']
2023-10-17 21:05:14,432 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('prod_nav_info0327',); args=['prod_nav_info0327']
2023-10-17 21:05:14,464 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('prod_nav_info0327',); args=['prod_nav_info0327']
2023-10-17 21:05:14,496 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('prod_nav_info0327',); args=['prod_nav_info0327']
2023-10-17 21:05:14,561 [DEBUG]    utils.py.execute [90] -- (0.033) QUERY = 'SELECT * FROM "PROD_NAV_INFO0327" WHERE ROWNUM < 2 AND 1065 > 0' - PARAMS = (); args=None
2023-10-17 21:05:14,592 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('PROD_NET_INFO',); args=['PROD_NET_INFO']
2023-10-17 21:05:14,622 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('prod_net_info',); args=['prod_net_info']
2023-10-17 21:05:14,653 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('prod_net_info',); args=['prod_net_info']
2023-10-17 21:05:14,685 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('prod_net_info',); args=['prod_net_info']
2023-10-17 21:05:14,715 [DEBUG]    utils.py.execute [90] -- (0.029) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('prod_net_info',); args=['prod_net_info']
2023-10-17 21:05:14,746 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('prod_net_info',); args=['prod_net_info']
2023-10-17 21:05:14,779 [DEBUG]    utils.py.execute [90] -- (0.033) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('prod_net_info',); args=['prod_net_info']
2023-10-17 21:05:14,810 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('prod_net_info',); args=['prod_net_info']
2023-10-17 21:05:14,872 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = 'SELECT * FROM "PROD_NET_INFO" WHERE ROWNUM < 2 AND 1066 > 0' - PARAMS = (); args=None
2023-10-17 21:05:14,903 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('PRODTERMTYPE',); args=['PRODTERMTYPE']
2023-10-17 21:05:14,934 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('prodtermtype',); args=['prodtermtype']
2023-10-17 21:05:14,965 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('prodtermtype',); args=['prodtermtype']
2023-10-17 21:05:14,996 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('prodtermtype',); args=['prodtermtype']
2023-10-17 21:05:15,027 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('prodtermtype',); args=['prodtermtype']
2023-10-17 21:05:15,058 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('prodtermtype',); args=['prodtermtype']
2023-10-17 21:05:15,170 [DEBUG]    utils.py.execute [90] -- (0.111) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('prodtermtype',); args=['prodtermtype']
2023-10-17 21:05:15,299 [DEBUG]    utils.py.execute [90] -- (0.129) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('prodtermtype',); args=['prodtermtype']
2023-10-17 21:05:15,363 [DEBUG]    utils.py.execute [90] -- (0.033) QUERY = 'SELECT * FROM "PRODTERMTYPE" WHERE ROWNUM < 2 AND 1067 > 0' - PARAMS = (); args=None
2023-10-17 21:05:15,395 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('PRODUCT_CODE_SETTING_PARAM',); args=['PRODUCT_CODE_SETTING_PARAM']
2023-10-17 21:05:15,426 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('product_code_setting_param',); args=['product_code_setting_param']
2023-10-17 21:05:15,492 [DEBUG]    utils.py.execute [90] -- (0.034) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('product_code_setting_param',); args=['product_code_setting_param']
2023-10-17 21:05:15,550 [DEBUG]    utils.py.execute [90] -- (0.059) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('product_code_setting_param',); args=['product_code_setting_param']
2023-10-17 21:05:15,581 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('product_code_setting_param',); args=['product_code_setting_param']
2023-10-17 21:05:15,642 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('product_code_setting_param',); args=['product_code_setting_param']
2023-10-17 21:05:15,697 [DEBUG]    utils.py.execute [90] -- (0.054) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('product_code_setting_param',); args=['product_code_setting_param']
2023-10-17 21:05:15,728 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('product_code_setting_param',); args=['product_code_setting_param']
2023-10-17 21:05:15,805 [DEBUG]    utils.py.execute [90] -- (0.042) QUERY = 'SELECT * FROM "PRODUCT_CODE_SETTING_PARAM" WHERE ROWNUM < 2 AND 1068 > 0' - PARAMS = (); args=None
2023-10-17 21:05:15,837 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('PRODUCT_DEAL_CODE_PARAM',); args=['PRODUCT_DEAL_CODE_PARAM']
2023-10-17 21:05:15,869 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('product_deal_code_param',); args=['product_deal_code_param']
2023-10-17 21:05:15,930 [DEBUG]    utils.py.execute [90] -- (0.029) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('product_deal_code_param',); args=['product_deal_code_param']
2023-10-17 21:05:15,986 [DEBUG]    utils.py.execute [90] -- (0.056) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('product_deal_code_param',); args=['product_deal_code_param']
2023-10-17 21:05:16,018 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('product_deal_code_param',); args=['product_deal_code_param']
2023-10-17 21:05:16,079 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('product_deal_code_param',); args=['product_deal_code_param']
2023-10-17 21:05:16,134 [DEBUG]    utils.py.execute [90] -- (0.054) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('product_deal_code_param',); args=['product_deal_code_param']
2023-10-17 21:05:16,164 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('product_deal_code_param',); args=['product_deal_code_param']
2023-10-17 21:05:16,236 [DEBUG]    utils.py.execute [90] -- (0.040) QUERY = 'SELECT * FROM "PRODUCT_DEAL_CODE_PARAM" WHERE ROWNUM < 2 AND 1069 > 0' - PARAMS = (); args=None
2023-10-17 21:05:16,269 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('PRODUCT_DELAY_SETTING_PARAM',); args=['PRODUCT_DELAY_SETTING_PARAM']
2023-10-17 21:05:16,300 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('product_delay_setting_param',); args=['product_delay_setting_param']
2023-10-17 21:05:16,362 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('product_delay_setting_param',); args=['product_delay_setting_param']
2023-10-17 21:05:16,419 [DEBUG]    utils.py.execute [90] -- (0.057) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('product_delay_setting_param',); args=['product_delay_setting_param']
2023-10-17 21:05:16,450 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('product_delay_setting_param',); args=['product_delay_setting_param']
2023-10-17 21:05:16,516 [DEBUG]    utils.py.execute [90] -- (0.033) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('product_delay_setting_param',); args=['product_delay_setting_param']
2023-10-17 21:05:16,570 [DEBUG]    utils.py.execute [90] -- (0.053) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('product_delay_setting_param',); args=['product_delay_setting_param']
2023-10-17 21:05:16,600 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('product_delay_setting_param',); args=['product_delay_setting_param']
2023-10-17 21:05:16,666 [DEBUG]    utils.py.execute [90] -- (0.035) QUERY = 'SELECT * FROM "PRODUCT_DELAY_SETTING_PARAM" WHERE ROWNUM < 2 AND 1070 > 0' - PARAMS = (); args=None
2023-10-17 21:05:16,698 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('PRODUCT_LIMIT_SETTING_PARAM',); args=['PRODUCT_LIMIT_SETTING_PARAM']
2023-10-17 21:05:16,730 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('product_limit_setting_param',); args=['product_limit_setting_param']
2023-10-17 21:05:16,791 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('product_limit_setting_param',); args=['product_limit_setting_param']
2023-10-17 21:05:16,847 [DEBUG]    utils.py.execute [90] -- (0.056) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('product_limit_setting_param',); args=['product_limit_setting_param']
2023-10-17 21:05:16,880 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('product_limit_setting_param',); args=['product_limit_setting_param']
2023-10-17 21:05:16,940 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('product_limit_setting_param',); args=['product_limit_setting_param']
2023-10-17 21:05:16,994 [DEBUG]    utils.py.execute [90] -- (0.053) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('product_limit_setting_param',); args=['product_limit_setting_param']
2023-10-17 21:05:17,028 [DEBUG]    utils.py.execute [90] -- (0.035) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('product_limit_setting_param',); args=['product_limit_setting_param']
2023-10-17 21:05:17,094 [DEBUG]    utils.py.execute [90] -- (0.034) QUERY = 'SELECT * FROM "PRODUCT_LIMIT_SETTING_PARAM" WHERE ROWNUM < 2 AND 1071 > 0' - PARAMS = (); args=None
2023-10-17 21:05:17,125 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('PRODUCT_MANAGE',); args=['PRODUCT_MANAGE']
2023-10-17 21:05:17,156 [DEBUG]    utils.py.execute [90] -- (0.029) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('product_manage',); args=['product_manage']
2023-10-17 21:05:17,188 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('product_manage',); args=['product_manage']
2023-10-17 21:05:17,222 [DEBUG]    utils.py.execute [90] -- (0.033) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('product_manage',); args=['product_manage']
2023-10-17 21:05:17,252 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('product_manage',); args=['product_manage']
2023-10-17 21:05:17,282 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('product_manage',); args=['product_manage']
2023-10-17 21:05:17,314 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('product_manage',); args=['product_manage']
2023-10-17 21:05:17,344 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('product_manage',); args=['product_manage']
2023-10-17 21:05:17,407 [DEBUG]    utils.py.execute [90] -- (0.033) QUERY = 'SELECT * FROM "PRODUCT_MANAGE" WHERE ROWNUM < 2 AND 1072 > 0' - PARAMS = (); args=None
2023-10-17 21:05:17,438 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('PRODUCT_MARKET_BASE_INFO',); args=['PRODUCT_MARKET_BASE_INFO']
2023-10-17 21:05:17,470 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('product_market_base_info',); args=['product_market_base_info']
2023-10-17 21:05:17,531 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('product_market_base_info',); args=['product_market_base_info']
2023-10-17 21:05:17,589 [DEBUG]    utils.py.execute [90] -- (0.057) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('product_market_base_info',); args=['product_market_base_info']
2023-10-17 21:05:17,619 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('product_market_base_info',); args=['product_market_base_info']
2023-10-17 21:05:17,682 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('product_market_base_info',); args=['product_market_base_info']
2023-10-17 21:05:17,736 [DEBUG]    utils.py.execute [90] -- (0.053) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('product_market_base_info',); args=['product_market_base_info']
2023-10-17 21:05:17,766 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('product_market_base_info',); args=['product_market_base_info']
2023-10-17 21:05:17,829 [DEBUG]    utils.py.execute [90] -- (0.033) QUERY = 'SELECT * FROM "PRODUCT_MARKET_BASE_INFO" WHERE ROWNUM < 2 AND 1073 > 0' - PARAMS = (); args=None
2023-10-17 21:05:17,861 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('PRODUCT_MARKET_HISTORICAL_COST',); args=['PRODUCT_MARKET_HISTORICAL_COST']
2023-10-17 21:05:17,892 [DEBUG]    utils.py.execute [90] -- (0.029) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('product_market_historical_cost',); args=['product_market_historical_cost']
2023-10-17 21:05:17,953 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('product_market_historical_cost',); args=['product_market_historical_cost']
2023-10-17 21:05:18,010 [DEBUG]    utils.py.execute [90] -- (0.056) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('product_market_historical_cost',); args=['product_market_historical_cost']
2023-10-17 21:05:18,041 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('product_market_historical_cost',); args=['product_market_historical_cost']
2023-10-17 21:05:18,101 [DEBUG]    utils.py.execute [90] -- (0.029) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('product_market_historical_cost',); args=['product_market_historical_cost']
2023-10-17 21:05:18,154 [DEBUG]    utils.py.execute [90] -- (0.053) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('product_market_historical_cost',); args=['product_market_historical_cost']
2023-10-17 21:05:18,185 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('product_market_historical_cost',); args=['product_market_historical_cost']
2023-10-17 21:05:18,248 [DEBUG]    utils.py.execute [90] -- (0.033) QUERY = 'SELECT * FROM "PRODUCT_MARKET_HISTORICAL_COST" WHERE ROWNUM < 2 AND 1074 > 0' - PARAMS = (); args=None
2023-10-17 21:05:18,281 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('PRODUCT_MARKET_LEDGER',); args=['PRODUCT_MARKET_LEDGER']
2023-10-17 21:05:18,312 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('product_market_ledger',); args=['product_market_ledger']
2023-10-17 21:05:18,372 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('product_market_ledger',); args=['product_market_ledger']
2023-10-17 21:05:18,428 [DEBUG]    utils.py.execute [90] -- (0.056) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('product_market_ledger',); args=['product_market_ledger']
2023-10-17 21:05:18,460 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('product_market_ledger',); args=['product_market_ledger']
2023-10-17 21:05:18,522 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('product_market_ledger',); args=['product_market_ledger']
2023-10-17 21:05:18,576 [DEBUG]    utils.py.execute [90] -- (0.053) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('product_market_ledger',); args=['product_market_ledger']
2023-10-17 21:05:18,612 [DEBUG]    utils.py.execute [90] -- (0.036) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('product_market_ledger',); args=['product_market_ledger']
2023-10-17 21:05:18,675 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = 'SELECT * FROM "PRODUCT_MARKET_LEDGER" WHERE ROWNUM < 2 AND 1075 > 0' - PARAMS = (); args=None
2023-10-17 21:05:18,708 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('PRODUCT_MARKET_OPERATION_INFO',); args=['PRODUCT_MARKET_OPERATION_INFO']
2023-10-17 21:05:18,739 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('product_market_operation_info',); args=['product_market_operation_info']
2023-10-17 21:05:18,800 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('product_market_operation_info',); args=['product_market_operation_info']
2023-10-17 21:05:18,856 [DEBUG]    utils.py.execute [90] -- (0.055) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('product_market_operation_info',); args=['product_market_operation_info']
2023-10-17 21:05:18,887 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('product_market_operation_info',); args=['product_market_operation_info']
2023-10-17 21:05:18,947 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('product_market_operation_info',); args=['product_market_operation_info']
2023-10-17 21:05:19,001 [DEBUG]    utils.py.execute [90] -- (0.053) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('product_market_operation_info',); args=['product_market_operation_info']
2023-10-17 21:05:19,032 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('product_market_operation_info',); args=['product_market_operation_info']
2023-10-17 21:05:19,099 [DEBUG]    utils.py.execute [90] -- (0.036) QUERY = 'SELECT * FROM "PRODUCT_MARKET_OPERATION_INFO" WHERE ROWNUM < 2 AND 1076 > 0' - PARAMS = (); args=None
2023-10-17 21:05:19,130 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('PRODUCT_MARKET_VALUATION',); args=['PRODUCT_MARKET_VALUATION']
2023-10-17 21:05:19,162 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('product_market_valuation',); args=['product_market_valuation']
2023-10-17 21:05:19,223 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('product_market_valuation',); args=['product_market_valuation']
2023-10-17 21:05:19,277 [DEBUG]    utils.py.execute [90] -- (0.053) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('product_market_valuation',); args=['product_market_valuation']
2023-10-17 21:05:19,310 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('product_market_valuation',); args=['product_market_valuation']
2023-10-17 21:05:19,370 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('product_market_valuation',); args=['product_market_valuation']
2023-10-17 21:05:19,424 [DEBUG]    utils.py.execute [90] -- (0.053) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('product_market_valuation',); args=['product_market_valuation']
2023-10-17 21:05:19,454 [DEBUG]    utils.py.execute [90] -- (0.029) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('product_market_valuation',); args=['product_market_valuation']
2023-10-17 21:05:19,517 [DEBUG]    utils.py.execute [90] -- (0.033) QUERY = 'SELECT * FROM "PRODUCT_MARKET_VALUATION" WHERE ROWNUM < 2 AND 1077 > 0' - PARAMS = (); args=None
2023-10-17 21:05:19,549 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('PRODUCT_MARKET_VALUATION0123',); args=['PRODUCT_MARKET_VALUATION0123']
2023-10-17 21:05:19,582 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('product_market_valuation0123',); args=['product_market_valuation0123']
2023-10-17 21:05:19,613 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('product_market_valuation0123',); args=['product_market_valuation0123']
2023-10-17 21:05:19,645 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('product_market_valuation0123',); args=['product_market_valuation0123']
2023-10-17 21:05:19,676 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('product_market_valuation0123',); args=['product_market_valuation0123']
2023-10-17 21:05:19,707 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('product_market_valuation0123',); args=['product_market_valuation0123']
2023-10-17 21:05:19,739 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('product_market_valuation0123',); args=['product_market_valuation0123']
2023-10-17 21:05:19,770 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('product_market_valuation0123',); args=['product_market_valuation0123']
2023-10-17 21:05:19,836 [DEBUG]    utils.py.execute [90] -- (0.034) QUERY = 'SELECT * FROM "PRODUCT_MARKET_VALUATION0123" WHERE ROWNUM < 2 AND 1078 > 0' - PARAMS = (); args=None
2023-10-17 21:05:19,867 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('PRODUCT_MARKET_VALUATION0603',); args=['PRODUCT_MARKET_VALUATION0603']
2023-10-17 21:05:19,898 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('product_market_valuation0603',); args=['product_market_valuation0603']
2023-10-17 21:05:19,928 [DEBUG]    utils.py.execute [90] -- (0.029) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('product_market_valuation0603',); args=['product_market_valuation0603']
2023-10-17 21:05:19,960 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('product_market_valuation0603',); args=['product_market_valuation0603']
2023-10-17 21:05:19,992 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('product_market_valuation0603',); args=['product_market_valuation0603']
2023-10-17 21:05:20,024 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('product_market_valuation0603',); args=['product_market_valuation0603']
2023-10-17 21:05:20,056 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('product_market_valuation0603',); args=['product_market_valuation0603']
2023-10-17 21:05:20,086 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('product_market_valuation0603',); args=['product_market_valuation0603']
2023-10-17 21:05:20,151 [DEBUG]    utils.py.execute [90] -- (0.034) QUERY = 'SELECT * FROM "PRODUCT_MARKET_VALUATION0603" WHERE ROWNUM < 2 AND 1079 > 0' - PARAMS = (); args=None
2023-10-17 21:05:20,183 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('PROJECT_REGISTER',); args=['PROJECT_REGISTER']
2023-10-17 21:05:20,215 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('project_register',); args=['project_register']
2023-10-17 21:05:20,276 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('project_register',); args=['project_register']
2023-10-17 21:05:20,335 [DEBUG]    utils.py.execute [90] -- (0.058) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('project_register',); args=['project_register']
2023-10-17 21:05:20,367 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('project_register',); args=['project_register']
2023-10-17 21:05:20,428 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('project_register',); args=['project_register']
2023-10-17 21:05:20,483 [DEBUG]    utils.py.execute [90] -- (0.054) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('project_register',); args=['project_register']
2023-10-17 21:05:20,513 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('project_register',); args=['project_register']
2023-10-17 21:05:20,581 [DEBUG]    utils.py.execute [90] -- (0.037) QUERY = 'SELECT * FROM "PROJECT_REGISTER" WHERE ROWNUM < 2 AND 1080 > 0' - PARAMS = (); args=None
2023-10-17 21:05:20,612 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('PROVINCES',); args=['PROVINCES']
2023-10-17 21:05:20,643 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('provinces',); args=['provinces']
2023-10-17 21:05:20,705 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('provinces',); args=['provinces']
2023-10-17 21:05:20,760 [DEBUG]    utils.py.execute [90] -- (0.055) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('provinces',); args=['provinces']
2023-10-17 21:05:20,792 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('provinces',); args=['provinces']
2023-10-17 21:05:20,853 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('provinces',); args=['provinces']
2023-10-17 21:05:20,908 [DEBUG]    utils.py.execute [90] -- (0.055) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('provinces',); args=['provinces']
2023-10-17 21:05:20,940 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('provinces',); args=['provinces']
2023-10-17 21:05:21,004 [DEBUG]    utils.py.execute [90] -- (0.034) QUERY = 'SELECT * FROM "PROVINCES" WHERE ROWNUM < 2 AND 1081 > 0' - PARAMS = (); args=None
2023-10-17 21:05:21,035 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('PUB_CUST_INFO',); args=['PUB_CUST_INFO']
2023-10-17 21:05:21,065 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('pub_cust_info',); args=['pub_cust_info']
2023-10-17 21:05:21,097 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('pub_cust_info',); args=['pub_cust_info']
2023-10-17 21:05:21,130 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('pub_cust_info',); args=['pub_cust_info']
2023-10-17 21:05:21,159 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('pub_cust_info',); args=['pub_cust_info']
2023-10-17 21:05:21,189 [DEBUG]    utils.py.execute [90] -- (0.029) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('pub_cust_info',); args=['pub_cust_info']
2023-10-17 21:05:21,221 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('pub_cust_info',); args=['pub_cust_info']
2023-10-17 21:05:21,252 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('pub_cust_info',); args=['pub_cust_info']
2023-10-17 21:05:21,317 [DEBUG]    utils.py.execute [90] -- (0.033) QUERY = 'SELECT * FROM "PUB_CUST_INFO" WHERE ROWNUM < 2 AND 1082 > 0' - PARAMS = (); args=None
2023-10-17 21:05:21,349 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('PUB_NEWS_DETAIL',); args=['PUB_NEWS_DETAIL']
2023-10-17 21:05:21,381 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('pub_news_detail',); args=['pub_news_detail']
2023-10-17 21:05:21,442 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('pub_news_detail',); args=['pub_news_detail']
2023-10-17 21:05:21,498 [DEBUG]    utils.py.execute [90] -- (0.056) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('pub_news_detail',); args=['pub_news_detail']
2023-10-17 21:05:21,531 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('pub_news_detail',); args=['pub_news_detail']
2023-10-17 21:05:21,591 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('pub_news_detail',); args=['pub_news_detail']
2023-10-17 21:05:21,645 [DEBUG]    utils.py.execute [90] -- (0.052) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('pub_news_detail',); args=['pub_news_detail']
2023-10-17 21:05:21,676 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('pub_news_detail',); args=['pub_news_detail']
2023-10-17 21:05:21,741 [DEBUG]    utils.py.execute [90] -- (0.034) QUERY = 'SELECT * FROM "PUB_NEWS_DETAIL" WHERE ROWNUM < 2 AND 1083 > 0' - PARAMS = (); args=None
2023-10-17 21:05:21,773 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('PUB_NEWS_DICT',); args=['PUB_NEWS_DICT']
2023-10-17 21:05:21,805 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('pub_news_dict',); args=['pub_news_dict']
2023-10-17 21:05:21,867 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('pub_news_dict',); args=['pub_news_dict']
2023-10-17 21:05:21,922 [DEBUG]    utils.py.execute [90] -- (0.054) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('pub_news_dict',); args=['pub_news_dict']
2023-10-17 21:05:21,954 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('pub_news_dict',); args=['pub_news_dict']
2023-10-17 21:05:22,015 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('pub_news_dict',); args=['pub_news_dict']
2023-10-17 21:05:22,070 [DEBUG]    utils.py.execute [90] -- (0.055) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('pub_news_dict',); args=['pub_news_dict']
2023-10-17 21:05:22,101 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('pub_news_dict',); args=['pub_news_dict']
2023-10-17 21:05:22,170 [DEBUG]    utils.py.execute [90] -- (0.037) QUERY = 'SELECT * FROM "PUB_NEWS_DICT" WHERE ROWNUM < 2 AND 1084 > 0' - PARAMS = (); args=None
2023-10-17 21:05:22,201 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('PUB_NEWS_EVENT',); args=['PUB_NEWS_EVENT']
2023-10-17 21:05:22,232 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('pub_news_event',); args=['pub_news_event']
2023-10-17 21:05:22,295 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('pub_news_event',); args=['pub_news_event']
2023-10-17 21:05:22,354 [DEBUG]    utils.py.execute [90] -- (0.058) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('pub_news_event',); args=['pub_news_event']
2023-10-17 21:05:22,386 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('pub_news_event',); args=['pub_news_event']
2023-10-17 21:05:22,449 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('pub_news_event',); args=['pub_news_event']
2023-10-17 21:05:22,503 [DEBUG]    utils.py.execute [90] -- (0.055) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('pub_news_event',); args=['pub_news_event']
2023-10-17 21:05:22,533 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('pub_news_event',); args=['pub_news_event']
2023-10-17 21:05:22,600 [DEBUG]    utils.py.execute [90] -- (0.034) QUERY = 'SELECT * FROM "PUB_NEWS_EVENT" WHERE ROWNUM < 2 AND 1085 > 0' - PARAMS = (); args=None
2023-10-17 21:05:22,632 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('PUB_NEWS_PERSON',); args=['PUB_NEWS_PERSON']
2023-10-17 21:05:22,665 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('pub_news_person',); args=['pub_news_person']
2023-10-17 21:05:22,727 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('pub_news_person',); args=['pub_news_person']
2023-10-17 21:05:22,782 [DEBUG]    utils.py.execute [90] -- (0.056) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('pub_news_person',); args=['pub_news_person']
2023-10-17 21:05:22,814 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('pub_news_person',); args=['pub_news_person']
2023-10-17 21:05:22,875 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('pub_news_person',); args=['pub_news_person']
2023-10-17 21:05:22,928 [DEBUG]    utils.py.execute [90] -- (0.053) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('pub_news_person',); args=['pub_news_person']
2023-10-17 21:05:22,959 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('pub_news_person',); args=['pub_news_person']
2023-10-17 21:05:23,027 [DEBUG]    utils.py.execute [90] -- (0.035) QUERY = 'SELECT * FROM "PUB_NEWS_PERSON" WHERE ROWNUM < 2 AND 1086 > 0' - PARAMS = (); args=None
2023-10-17 21:05:23,058 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('READ',); args=['READ']
2023-10-17 21:05:23,090 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('read',); args=['read']
2023-10-17 21:05:23,151 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('read',); args=['read']
2023-10-17 21:05:23,210 [DEBUG]    utils.py.execute [90] -- (0.059) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('read',); args=['read']
2023-10-17 21:05:23,242 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('read',); args=['read']
2023-10-17 21:05:23,304 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('read',); args=['read']
2023-10-17 21:05:23,359 [DEBUG]    utils.py.execute [90] -- (0.055) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('read',); args=['read']
2023-10-17 21:05:23,390 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('read',); args=['read']
2023-10-17 21:05:23,463 [DEBUG]    utils.py.execute [90] -- (0.037) QUERY = 'SELECT * FROM "READ" WHERE ROWNUM < 2 AND 1087 > 0' - PARAMS = (); args=None
2023-10-17 21:05:23,495 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('READUSER_FPC',); args=['READUSER_FPC']
2023-10-17 21:05:23,527 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('readuser_fpc',); args=['readuser_fpc']
2023-10-17 21:05:23,588 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('readuser_fpc',); args=['readuser_fpc']
2023-10-17 21:05:23,647 [DEBUG]    utils.py.execute [90] -- (0.058) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('readuser_fpc',); args=['readuser_fpc']
2023-10-17 21:05:23,680 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('readuser_fpc',); args=['readuser_fpc']
2023-10-17 21:05:23,742 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('readuser_fpc',); args=['readuser_fpc']
2023-10-17 21:05:23,797 [DEBUG]    utils.py.execute [90] -- (0.054) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('readuser_fpc',); args=['readuser_fpc']
2023-10-17 21:05:23,828 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('readuser_fpc',); args=['readuser_fpc']
2023-10-17 21:05:23,899 [DEBUG]    utils.py.execute [90] -- (0.037) QUERY = 'SELECT * FROM "READUSER_FPC" WHERE ROWNUM < 2 AND 1088 > 0' - PARAMS = (); args=None
2023-10-17 21:05:23,930 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('READUSER_FPC2',); args=['READUSER_FPC2']
2023-10-17 21:05:23,962 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('readuser_fpc2',); args=['readuser_fpc2']
2023-10-17 21:05:24,023 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('readuser_fpc2',); args=['readuser_fpc2']
2023-10-17 21:05:24,080 [DEBUG]    utils.py.execute [90] -- (0.058) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('readuser_fpc2',); args=['readuser_fpc2']
2023-10-17 21:05:24,113 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('readuser_fpc2',); args=['readuser_fpc2']
2023-10-17 21:05:24,176 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('readuser_fpc2',); args=['readuser_fpc2']
2023-10-17 21:05:24,230 [DEBUG]    utils.py.execute [90] -- (0.053) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('readuser_fpc2',); args=['readuser_fpc2']
2023-10-17 21:05:24,260 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('readuser_fpc2',); args=['readuser_fpc2']
2023-10-17 21:05:24,326 [DEBUG]    utils.py.execute [90] -- (0.035) QUERY = 'SELECT * FROM "READUSER_FPC2" WHERE ROWNUM < 2 AND 1089 > 0' - PARAMS = (); args=None
2023-10-17 21:05:24,357 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('RECENTLY_UPLOAD_FILE',); args=['RECENTLY_UPLOAD_FILE']
2023-10-17 21:05:24,388 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('recently_upload_file',); args=['recently_upload_file']
2023-10-17 21:05:24,419 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('recently_upload_file',); args=['recently_upload_file']
2023-10-17 21:05:24,475 [DEBUG]    utils.py.execute [90] -- (0.056) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('recently_upload_file',); args=['recently_upload_file']
2023-10-17 21:05:24,506 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('recently_upload_file',); args=['recently_upload_file']
2023-10-17 21:05:24,536 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('recently_upload_file',); args=['recently_upload_file']
2023-10-17 21:05:24,591 [DEBUG]    utils.py.execute [90] -- (0.053) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('recently_upload_file',); args=['recently_upload_file']
2023-10-17 21:05:24,622 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('recently_upload_file',); args=['recently_upload_file']
2023-10-17 21:05:24,688 [DEBUG]    utils.py.execute [90] -- (0.036) QUERY = 'SELECT * FROM "RECENTLY_UPLOAD_FILE" WHERE ROWNUM < 2 AND 1090 > 0' - PARAMS = (); args=None
2023-10-17 21:05:24,721 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('RECENTLY_UPLOAD_FILEBAK',); args=['RECENTLY_UPLOAD_FILEBAK']
2023-10-17 21:05:24,752 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('recently_upload_filebak',); args=['recently_upload_filebak']
2023-10-17 21:05:24,784 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('recently_upload_filebak',); args=['recently_upload_filebak']
2023-10-17 21:05:24,838 [DEBUG]    utils.py.execute [90] -- (0.054) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('recently_upload_filebak',); args=['recently_upload_filebak']
2023-10-17 21:05:24,870 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('recently_upload_filebak',); args=['recently_upload_filebak']
2023-10-17 21:05:24,901 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('recently_upload_filebak',); args=['recently_upload_filebak']
2023-10-17 21:05:24,955 [DEBUG]    utils.py.execute [90] -- (0.054) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('recently_upload_filebak',); args=['recently_upload_filebak']
2023-10-17 21:05:24,986 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('recently_upload_filebak',); args=['recently_upload_filebak']
2023-10-17 21:05:25,054 [DEBUG]    utils.py.execute [90] -- (0.038) QUERY = 'SELECT * FROM "RECENTLY_UPLOAD_FILEBAK" WHERE ROWNUM < 2 AND 1091 > 0' - PARAMS = (); args=None
2023-10-17 21:05:25,159 [DEBUG]    utils.py.execute [90] -- (0.105) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('RECOVERED_BENE_HOLDERS',); args=['RECOVERED_BENE_HOLDERS']
2023-10-17 21:05:25,290 [DEBUG]    utils.py.execute [90] -- (0.130) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('recovered_bene_holders',); args=['recovered_bene_holders']
2023-10-17 21:05:25,323 [DEBUG]    utils.py.execute [90] -- (0.033) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('recovered_bene_holders',); args=['recovered_bene_holders']
2023-10-17 21:05:25,356 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('recovered_bene_holders',); args=['recovered_bene_holders']
2023-10-17 21:05:25,387 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('recovered_bene_holders',); args=['recovered_bene_holders']
2023-10-17 21:05:25,419 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('recovered_bene_holders',); args=['recovered_bene_holders']
2023-10-17 21:05:25,451 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('recovered_bene_holders',); args=['recovered_bene_holders']
2023-10-17 21:05:25,481 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('recovered_bene_holders',); args=['recovered_bene_holders']
2023-10-17 21:05:25,548 [DEBUG]    utils.py.execute [90] -- (0.036) QUERY = 'SELECT * FROM "RECOVERED_BENE_HOLDERS" WHERE ROWNUM < 2 AND 1092 > 0' - PARAMS = (); args=None
2023-10-17 21:05:25,579 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('RECOVERED_BENE_HOLDERS_BAK',); args=['RECOVERED_BENE_HOLDERS_BAK']
2023-10-17 21:05:25,611 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('recovered_bene_holders_bak',); args=['recovered_bene_holders_bak']
2023-10-17 21:05:25,641 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('recovered_bene_holders_bak',); args=['recovered_bene_holders_bak']
2023-10-17 21:05:25,675 [DEBUG]    utils.py.execute [90] -- (0.033) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('recovered_bene_holders_bak',); args=['recovered_bene_holders_bak']
2023-10-17 21:05:25,705 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('recovered_bene_holders_bak',); args=['recovered_bene_holders_bak']
2023-10-17 21:05:25,736 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('recovered_bene_holders_bak',); args=['recovered_bene_holders_bak']
2023-10-17 21:05:25,768 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('recovered_bene_holders_bak',); args=['recovered_bene_holders_bak']
2023-10-17 21:05:25,799 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('recovered_bene_holders_bak',); args=['recovered_bene_holders_bak']
2023-10-17 21:05:25,865 [DEBUG]    utils.py.execute [90] -- (0.036) QUERY = 'SELECT * FROM "RECOVERED_BENE_HOLDERS_BAK" WHERE ROWNUM < 2 AND 1093 > 0' - PARAMS = (); args=None
2023-10-17 21:05:25,895 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('REF_BASKET',); args=['REF_BASKET']
2023-10-17 21:05:25,927 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('ref_basket',); args=['ref_basket']
2023-10-17 21:05:25,989 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('ref_basket',); args=['ref_basket']
2023-10-17 21:05:26,048 [DEBUG]    utils.py.execute [90] -- (0.058) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('ref_basket',); args=['ref_basket']
2023-10-17 21:05:26,079 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('ref_basket',); args=['ref_basket']
2023-10-17 21:05:26,141 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('ref_basket',); args=['ref_basket']
2023-10-17 21:05:26,196 [DEBUG]    utils.py.execute [90] -- (0.055) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('ref_basket',); args=['ref_basket']
2023-10-17 21:05:26,226 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('ref_basket',); args=['ref_basket']
2023-10-17 21:05:26,292 [DEBUG]    utils.py.execute [90] -- (0.035) QUERY = 'SELECT * FROM "REF_BASKET" WHERE ROWNUM < 2 AND 1094 > 0' - PARAMS = (); args=None
2023-10-17 21:05:26,323 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('REF_BASKET_CONSTITUENT',); args=['REF_BASKET_CONSTITUENT']
2023-10-17 21:05:26,354 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('ref_basket_constituent',); args=['ref_basket_constituent']
2023-10-17 21:05:26,415 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('ref_basket_constituent',); args=['ref_basket_constituent']
2023-10-17 21:05:26,476 [DEBUG]    utils.py.execute [90] -- (0.061) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('ref_basket_constituent',); args=['ref_basket_constituent']
2023-10-17 21:05:26,508 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('ref_basket_constituent',); args=['ref_basket_constituent']
2023-10-17 21:05:26,569 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('ref_basket_constituent',); args=['ref_basket_constituent']
2023-10-17 21:05:26,621 [DEBUG]    utils.py.execute [90] -- (0.052) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('ref_basket_constituent',); args=['ref_basket_constituent']
2023-10-17 21:05:26,653 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('ref_basket_constituent',); args=['ref_basket_constituent']
2023-10-17 21:05:26,720 [DEBUG]    utils.py.execute [90] -- (0.036) QUERY = 'SELECT * FROM "REF_BASKET_CONSTITUENT" WHERE ROWNUM < 2 AND 1095 > 0' - PARAMS = (); args=None
2023-10-17 21:05:26,749 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('REF_BUSI_FLAG_CODE',); args=['REF_BUSI_FLAG_CODE']
2023-10-17 21:05:26,781 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('ref_busi_flag_code',); args=['ref_busi_flag_code']
2023-10-17 21:05:26,813 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('ref_busi_flag_code',); args=['ref_busi_flag_code']
2023-10-17 21:05:26,844 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('ref_busi_flag_code',); args=['ref_busi_flag_code']
2023-10-17 21:05:26,875 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('ref_busi_flag_code',); args=['ref_busi_flag_code']
2023-10-17 21:05:26,906 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('ref_busi_flag_code',); args=['ref_busi_flag_code']
2023-10-17 21:05:26,938 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('ref_busi_flag_code',); args=['ref_busi_flag_code']
2023-10-17 21:05:26,968 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('ref_busi_flag_code',); args=['ref_busi_flag_code']
2023-10-17 21:05:27,030 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = 'SELECT * FROM "REF_BUSI_FLAG_CODE" WHERE ROWNUM < 2 AND 1096 > 0' - PARAMS = (); args=None
2023-10-17 21:05:27,062 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('REF_CERT_TYPE_CODE',); args=['REF_CERT_TYPE_CODE']
2023-10-17 21:05:27,093 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('ref_cert_type_code',); args=['ref_cert_type_code']
2023-10-17 21:05:27,125 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('ref_cert_type_code',); args=['ref_cert_type_code']
2023-10-17 21:05:27,158 [DEBUG]    utils.py.execute [90] -- (0.033) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('ref_cert_type_code',); args=['ref_cert_type_code']
2023-10-17 21:05:27,189 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('ref_cert_type_code',); args=['ref_cert_type_code']
2023-10-17 21:05:27,221 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('ref_cert_type_code',); args=['ref_cert_type_code']
2023-10-17 21:05:27,253 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('ref_cert_type_code',); args=['ref_cert_type_code']
2023-10-17 21:05:27,283 [DEBUG]    utils.py.execute [90] -- (0.029) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('ref_cert_type_code',); args=['ref_cert_type_code']
2023-10-17 21:05:27,346 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = 'SELECT * FROM "REF_CERT_TYPE_CODE" WHERE ROWNUM < 2 AND 1097 > 0' - PARAMS = (); args=None
2023-10-17 21:05:27,378 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('REF_CONTR_OPTION_REPORT',); args=['REF_CONTR_OPTION_REPORT']
2023-10-17 21:05:27,408 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('ref_contr_option_report',); args=['ref_contr_option_report']
2023-10-17 21:05:27,468 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('ref_contr_option_report',); args=['ref_contr_option_report']
2023-10-17 21:05:27,523 [DEBUG]    utils.py.execute [90] -- (0.054) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('ref_contr_option_report',); args=['ref_contr_option_report']
2023-10-17 21:05:27,553 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('ref_contr_option_report',); args=['ref_contr_option_report']
2023-10-17 21:05:27,614 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('ref_contr_option_report',); args=['ref_contr_option_report']
2023-10-17 21:05:27,668 [DEBUG]    utils.py.execute [90] -- (0.054) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('ref_contr_option_report',); args=['ref_contr_option_report']
2023-10-17 21:05:27,699 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('ref_contr_option_report',); args=['ref_contr_option_report']
2023-10-17 21:05:27,765 [DEBUG]    utils.py.execute [90] -- (0.035) QUERY = 'SELECT * FROM "REF_CONTR_OPTION_REPORT" WHERE ROWNUM < 2 AND 1098 > 0' - PARAMS = (); args=None
2023-10-17 21:05:27,797 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('REF_CONTR_STRUC_BARRIER',); args=['REF_CONTR_STRUC_BARRIER']
2023-10-17 21:05:27,828 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('ref_contr_struc_barrier',); args=['ref_contr_struc_barrier']
2023-10-17 21:05:27,892 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('ref_contr_struc_barrier',); args=['ref_contr_struc_barrier']
2023-10-17 21:05:27,946 [DEBUG]    utils.py.execute [90] -- (0.053) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('ref_contr_struc_barrier',); args=['ref_contr_struc_barrier']
2023-10-17 21:05:27,978 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('ref_contr_struc_barrier',); args=['ref_contr_struc_barrier']
2023-10-17 21:05:28,039 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('ref_contr_struc_barrier',); args=['ref_contr_struc_barrier']
2023-10-17 21:05:28,093 [DEBUG]    utils.py.execute [90] -- (0.053) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('ref_contr_struc_barrier',); args=['ref_contr_struc_barrier']
2023-10-17 21:05:28,125 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('ref_contr_struc_barrier',); args=['ref_contr_struc_barrier']
2023-10-17 21:05:28,194 [DEBUG]    utils.py.execute [90] -- (0.035) QUERY = 'SELECT * FROM "REF_CONTR_STRUC_BARRIER" WHERE ROWNUM < 2 AND 1099 > 0' - PARAMS = (); args=None
2023-10-17 21:05:28,226 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('REF_CONTR_STRUC_CR',); args=['REF_CONTR_STRUC_CR']
2023-10-17 21:05:28,256 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('ref_contr_struc_cr',); args=['ref_contr_struc_cr']
2023-10-17 21:05:28,328 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('ref_contr_struc_cr',); args=['ref_contr_struc_cr']
2023-10-17 21:05:28,384 [DEBUG]    utils.py.execute [90] -- (0.056) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('ref_contr_struc_cr',); args=['ref_contr_struc_cr']
2023-10-17 21:05:28,417 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('ref_contr_struc_cr',); args=['ref_contr_struc_cr']
2023-10-17 21:05:28,476 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('ref_contr_struc_cr',); args=['ref_contr_struc_cr']
2023-10-17 21:05:28,529 [DEBUG]    utils.py.execute [90] -- (0.052) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('ref_contr_struc_cr',); args=['ref_contr_struc_cr']
2023-10-17 21:05:28,560 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('ref_contr_struc_cr',); args=['ref_contr_struc_cr']
2023-10-17 21:05:28,627 [DEBUG]    utils.py.execute [90] -- (0.036) QUERY = 'SELECT * FROM "REF_CONTR_STRUC_CR" WHERE ROWNUM < 2 AND 1100 > 0' - PARAMS = (); args=None
2023-10-17 21:05:28,658 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('REF_CONTR_STRUC_PR',); args=['REF_CONTR_STRUC_PR']
2023-10-17 21:05:28,689 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('ref_contr_struc_pr',); args=['ref_contr_struc_pr']
2023-10-17 21:05:28,749 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('ref_contr_struc_pr',); args=['ref_contr_struc_pr']
2023-10-17 21:05:28,803 [DEBUG]    utils.py.execute [90] -- (0.054) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('ref_contr_struc_pr',); args=['ref_contr_struc_pr']
2023-10-17 21:05:28,833 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('ref_contr_struc_pr',); args=['ref_contr_struc_pr']
2023-10-17 21:05:28,894 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('ref_contr_struc_pr',); args=['ref_contr_struc_pr']
2023-10-17 21:05:28,950 [DEBUG]    utils.py.execute [90] -- (0.056) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('ref_contr_struc_pr',); args=['ref_contr_struc_pr']
2023-10-17 21:05:28,981 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('ref_contr_struc_pr',); args=['ref_contr_struc_pr']
2023-10-17 21:05:29,047 [DEBUG]    utils.py.execute [90] -- (0.034) QUERY = 'SELECT * FROM "REF_CONTR_STRUC_PR" WHERE ROWNUM < 2 AND 1101 > 0' - PARAMS = (); args=None
2023-10-17 21:05:29,078 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('REF_CONTR_STRUC_STRIKE',); args=['REF_CONTR_STRUC_STRIKE']
2023-10-17 21:05:29,111 [DEBUG]    utils.py.execute [90] -- (0.033) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('ref_contr_struc_strike',); args=['ref_contr_struc_strike']
2023-10-17 21:05:29,172 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('ref_contr_struc_strike',); args=['ref_contr_struc_strike']
2023-10-17 21:05:29,226 [DEBUG]    utils.py.execute [90] -- (0.053) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('ref_contr_struc_strike',); args=['ref_contr_struc_strike']
2023-10-17 21:05:29,258 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('ref_contr_struc_strike',); args=['ref_contr_struc_strike']
2023-10-17 21:05:29,318 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('ref_contr_struc_strike',); args=['ref_contr_struc_strike']
2023-10-17 21:05:29,375 [DEBUG]    utils.py.execute [90] -- (0.055) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('ref_contr_struc_strike',); args=['ref_contr_struc_strike']
2023-10-17 21:05:29,405 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('ref_contr_struc_strike',); args=['ref_contr_struc_strike']
2023-10-17 21:05:29,472 [DEBUG]    utils.py.execute [90] -- (0.036) QUERY = 'SELECT * FROM "REF_CONTR_STRUC_STRIKE" WHERE ROWNUM < 2 AND 1102 > 0' - PARAMS = (); args=None
2023-10-17 21:05:29,504 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('REF_CONTRACT_STRUCTURE',); args=['REF_CONTRACT_STRUCTURE']
2023-10-17 21:05:29,537 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('ref_contract_structure',); args=['ref_contract_structure']
2023-10-17 21:05:29,599 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('ref_contract_structure',); args=['ref_contract_structure']
2023-10-17 21:05:29,657 [DEBUG]    utils.py.execute [90] -- (0.058) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('ref_contract_structure',); args=['ref_contract_structure']
2023-10-17 21:05:29,688 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('ref_contract_structure',); args=['ref_contract_structure']
2023-10-17 21:05:29,749 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('ref_contract_structure',); args=['ref_contract_structure']
2023-10-17 21:05:29,805 [DEBUG]    utils.py.execute [90] -- (0.055) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('ref_contract_structure',); args=['ref_contract_structure']
2023-10-17 21:05:29,836 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('ref_contract_structure',); args=['ref_contract_structure']
2023-10-17 21:05:29,906 [DEBUG]    utils.py.execute [90] -- (0.036) QUERY = 'SELECT * FROM "REF_CONTRACT_STRUCTURE" WHERE ROWNUM < 2 AND 1103 > 0' - PARAMS = (); args=None
2023-10-17 21:05:29,937 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('REF_ENTRUST_MODE_CODE',); args=['REF_ENTRUST_MODE_CODE']
2023-10-17 21:05:29,967 [DEBUG]    utils.py.execute [90] -- (0.029) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('ref_entrust_mode_code',); args=['ref_entrust_mode_code']
2023-10-17 21:05:29,998 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('ref_entrust_mode_code',); args=['ref_entrust_mode_code']
2023-10-17 21:05:30,034 [DEBUG]    utils.py.execute [90] -- (0.036) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('ref_entrust_mode_code',); args=['ref_entrust_mode_code']
2023-10-17 21:05:30,064 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('ref_entrust_mode_code',); args=['ref_entrust_mode_code']
2023-10-17 21:05:30,096 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('ref_entrust_mode_code',); args=['ref_entrust_mode_code']
2023-10-17 21:05:30,132 [DEBUG]    utils.py.execute [90] -- (0.034) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('ref_entrust_mode_code',); args=['ref_entrust_mode_code']
2023-10-17 21:05:30,164 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('ref_entrust_mode_code',); args=['ref_entrust_mode_code']
2023-10-17 21:05:30,226 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = 'SELECT * FROM "REF_ENTRUST_MODE_CODE" WHERE ROWNUM < 2 AND 1104 > 0' - PARAMS = (); args=None
2023-10-17 21:05:30,257 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('REF_ENTRUST_STATUS_CODE',); args=['REF_ENTRUST_STATUS_CODE']
2023-10-17 21:05:30,289 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('ref_entrust_status_code',); args=['ref_entrust_status_code']
2023-10-17 21:05:30,320 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('ref_entrust_status_code',); args=['ref_entrust_status_code']
2023-10-17 21:05:30,353 [DEBUG]    utils.py.execute [90] -- (0.034) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('ref_entrust_status_code',); args=['ref_entrust_status_code']
2023-10-17 21:05:30,385 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('ref_entrust_status_code',); args=['ref_entrust_status_code']
2023-10-17 21:05:30,416 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('ref_entrust_status_code',); args=['ref_entrust_status_code']
2023-10-17 21:05:30,451 [DEBUG]    utils.py.execute [90] -- (0.033) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('ref_entrust_status_code',); args=['ref_entrust_status_code']
2023-10-17 21:05:30,483 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('ref_entrust_status_code',); args=['ref_entrust_status_code']
2023-10-17 21:05:30,548 [DEBUG]    utils.py.execute [90] -- (0.033) QUERY = 'SELECT * FROM "REF_ENTRUST_STATUS_CODE" WHERE ROWNUM < 2 AND 1105 > 0' - PARAMS = (); args=None
2023-10-17 21:05:30,579 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('REF_EXCHANGE_CALENDER',); args=['REF_EXCHANGE_CALENDER']
2023-10-17 21:05:30,611 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('ref_exchange_calender',); args=['ref_exchange_calender']
2023-10-17 21:05:30,642 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('ref_exchange_calender',); args=['ref_exchange_calender']
2023-10-17 21:05:30,676 [DEBUG]    utils.py.execute [90] -- (0.034) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('ref_exchange_calender',); args=['ref_exchange_calender']
2023-10-17 21:05:30,706 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('ref_exchange_calender',); args=['ref_exchange_calender']
2023-10-17 21:05:30,737 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('ref_exchange_calender',); args=['ref_exchange_calender']
2023-10-17 21:05:30,771 [DEBUG]    utils.py.execute [90] -- (0.034) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('ref_exchange_calender',); args=['ref_exchange_calender']
2023-10-17 21:05:30,802 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('ref_exchange_calender',); args=['ref_exchange_calender']
2023-10-17 21:05:30,866 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = 'SELECT * FROM "REF_EXCHANGE_CALENDER" WHERE ROWNUM < 2 AND 1106 > 0' - PARAMS = (); args=None
2023-10-17 21:05:30,897 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('REF_INSTRUMENT',); args=['REF_INSTRUMENT']
2023-10-17 21:05:30,928 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('ref_instrument',); args=['ref_instrument']
2023-10-17 21:05:30,990 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('ref_instrument',); args=['ref_instrument']
2023-10-17 21:05:31,046 [DEBUG]    utils.py.execute [90] -- (0.056) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('ref_instrument',); args=['ref_instrument']
2023-10-17 21:05:31,078 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('ref_instrument',); args=['ref_instrument']
2023-10-17 21:05:31,140 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('ref_instrument',); args=['ref_instrument']
2023-10-17 21:05:31,192 [DEBUG]    utils.py.execute [90] -- (0.052) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('ref_instrument',); args=['ref_instrument']
2023-10-17 21:05:31,222 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('ref_instrument',); args=['ref_instrument']
2023-10-17 21:05:31,292 [DEBUG]    utils.py.execute [90] -- (0.037) QUERY = 'SELECT * FROM "REF_INSTRUMENT" WHERE ROWNUM < 2 AND 1107 > 0' - PARAMS = (); args=None
2023-10-17 21:05:31,323 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('REF_INSTRUMENT_20221101',); args=['REF_INSTRUMENT_20221101']
2023-10-17 21:05:31,353 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('ref_instrument_20221101',); args=['ref_instrument_20221101']
2023-10-17 21:05:31,385 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('ref_instrument_20221101',); args=['ref_instrument_20221101']
2023-10-17 21:05:31,418 [DEBUG]    utils.py.execute [90] -- (0.033) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('ref_instrument_20221101',); args=['ref_instrument_20221101']
2023-10-17 21:05:31,448 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('ref_instrument_20221101',); args=['ref_instrument_20221101']
2023-10-17 21:05:31,479 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('ref_instrument_20221101',); args=['ref_instrument_20221101']
2023-10-17 21:05:31,513 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('ref_instrument_20221101',); args=['ref_instrument_20221101']
2023-10-17 21:05:31,543 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('ref_instrument_20221101',); args=['ref_instrument_20221101']
2023-10-17 21:05:31,609 [DEBUG]    utils.py.execute [90] -- (0.034) QUERY = 'SELECT * FROM "REF_INSTRUMENT_20221101" WHERE ROWNUM < 2 AND 1108 > 0' - PARAMS = (); args=None
2023-10-17 21:05:31,640 [DEBUG]    utils.py.execute [90] -- (0.029) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('REF_OTC_OPTION_DEAL',); args=['REF_OTC_OPTION_DEAL']
2023-10-17 21:05:31,670 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('ref_otc_option_deal',); args=['ref_otc_option_deal']
2023-10-17 21:05:31,701 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('ref_otc_option_deal',); args=['ref_otc_option_deal']
2023-10-17 21:05:31,733 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('ref_otc_option_deal',); args=['ref_otc_option_deal']
2023-10-17 21:05:31,764 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('ref_otc_option_deal',); args=['ref_otc_option_deal']
2023-10-17 21:05:31,795 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('ref_otc_option_deal',); args=['ref_otc_option_deal']
2023-10-17 21:05:31,827 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('ref_otc_option_deal',); args=['ref_otc_option_deal']
2023-10-17 21:05:31,857 [DEBUG]    utils.py.execute [90] -- (0.029) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('ref_otc_option_deal',); args=['ref_otc_option_deal']
2023-10-17 21:05:31,921 [DEBUG]    utils.py.execute [90] -- (0.034) QUERY = 'SELECT * FROM "REF_OTC_OPTION_DEAL" WHERE ROWNUM < 2 AND 1109 > 0' - PARAMS = (); args=None
2023-10-17 21:05:31,954 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('REF_OTC_OPTION_DEAL_20221101',); args=['REF_OTC_OPTION_DEAL_20221101']
2023-10-17 21:05:31,984 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('ref_otc_option_deal_20221101',); args=['ref_otc_option_deal_20221101']
2023-10-17 21:05:32,016 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('ref_otc_option_deal_20221101',); args=['ref_otc_option_deal_20221101']
2023-10-17 21:05:32,047 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('ref_otc_option_deal_20221101',); args=['ref_otc_option_deal_20221101']
2023-10-17 21:05:32,081 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('ref_otc_option_deal_20221101',); args=['ref_otc_option_deal_20221101']
2023-10-17 21:05:32,111 [DEBUG]    utils.py.execute [90] -- (0.029) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('ref_otc_option_deal_20221101',); args=['ref_otc_option_deal_20221101']
2023-10-17 21:05:32,143 [DEBUG]    utils.py.execute [90] -- (0.033) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('ref_otc_option_deal_20221101',); args=['ref_otc_option_deal_20221101']
2023-10-17 21:05:32,173 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('ref_otc_option_deal_20221101',); args=['ref_otc_option_deal_20221101']
2023-10-17 21:05:32,243 [DEBUG]    utils.py.execute [90] -- (0.038) QUERY = 'SELECT * FROM "REF_OTC_OPTION_DEAL_20221101" WHERE ROWNUM < 2 AND 1110 > 0' - PARAMS = (); args=None
2023-10-17 21:05:32,274 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('REPORTNO',); args=['REPORTNO']
2023-10-17 21:05:32,305 [DEBUG]    utils.py.execute [90] -- (0.029) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('reportno',); args=['reportno']
2023-10-17 21:05:32,336 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('reportno',); args=['reportno']
2023-10-17 21:05:32,367 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('reportno',); args=['reportno']
2023-10-17 21:05:32,399 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('reportno',); args=['reportno']
2023-10-17 21:05:32,431 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('reportno',); args=['reportno']
2023-10-17 21:05:32,462 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('reportno',); args=['reportno']
2023-10-17 21:05:32,494 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('reportno',); args=['reportno']
2023-10-17 21:05:32,557 [DEBUG]    utils.py.execute [90] -- (0.033) QUERY = 'SELECT * FROM "REPORTNO" WHERE ROWNUM < 2 AND 1111 > 0' - PARAMS = (); args=None
2023-10-17 21:05:32,588 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('REPURCHASE_AGREEMENT_MONITOR',); args=['REPURCHASE_AGREEMENT_MONITOR']
2023-10-17 21:05:32,619 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('repurchase_agreement_monitor',); args=['repurchase_agreement_monitor']
2023-10-17 21:05:32,680 [DEBUG]    utils.py.execute [90] -- (0.029) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('repurchase_agreement_monitor',); args=['repurchase_agreement_monitor']
2023-10-17 21:05:32,737 [DEBUG]    utils.py.execute [90] -- (0.056) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('repurchase_agreement_monitor',); args=['repurchase_agreement_monitor']
2023-10-17 21:05:32,768 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('repurchase_agreement_monitor',); args=['repurchase_agreement_monitor']
2023-10-17 21:05:32,831 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('repurchase_agreement_monitor',); args=['repurchase_agreement_monitor']
2023-10-17 21:05:32,885 [DEBUG]    utils.py.execute [90] -- (0.054) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('repurchase_agreement_monitor',); args=['repurchase_agreement_monitor']
2023-10-17 21:05:32,915 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('repurchase_agreement_monitor',); args=['repurchase_agreement_monitor']
2023-10-17 21:05:32,981 [DEBUG]    utils.py.execute [90] -- (0.036) QUERY = 'SELECT * FROM "REPURCHASE_AGREEMENT_MONITOR" WHERE ROWNUM < 2 AND 1112 > 0' - PARAMS = (); args=None
2023-10-17 21:05:33,013 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('REPURCHASE_GUAR_LINE',); args=['REPURCHASE_GUAR_LINE']
2023-10-17 21:05:33,045 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('repurchase_guar_line',); args=['repurchase_guar_line']
2023-10-17 21:05:33,106 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('repurchase_guar_line',); args=['repurchase_guar_line']
2023-10-17 21:05:33,161 [DEBUG]    utils.py.execute [90] -- (0.054) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('repurchase_guar_line',); args=['repurchase_guar_line']
2023-10-17 21:05:33,191 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('repurchase_guar_line',); args=['repurchase_guar_line']
2023-10-17 21:05:33,251 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('repurchase_guar_line',); args=['repurchase_guar_line']
2023-10-17 21:05:33,306 [DEBUG]    utils.py.execute [90] -- (0.054) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('repurchase_guar_line',); args=['repurchase_guar_line']
2023-10-17 21:05:33,336 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('repurchase_guar_line',); args=['repurchase_guar_line']
2023-10-17 21:05:33,401 [DEBUG]    utils.py.execute [90] -- (0.035) QUERY = 'SELECT * FROM "REPURCHASE_GUAR_LINE" WHERE ROWNUM < 2 AND 1113 > 0' - PARAMS = (); args=None
2023-10-17 21:05:33,433 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('REPURCHASE_REMINDER_RULES',); args=['REPURCHASE_REMINDER_RULES']
2023-10-17 21:05:33,463 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('repurchase_reminder_rules',); args=['repurchase_reminder_rules']
2023-10-17 21:05:33,525 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('repurchase_reminder_rules',); args=['repurchase_reminder_rules']
2023-10-17 21:05:33,582 [DEBUG]    utils.py.execute [90] -- (0.056) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('repurchase_reminder_rules',); args=['repurchase_reminder_rules']
2023-10-17 21:05:33,617 [DEBUG]    utils.py.execute [90] -- (0.034) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('repurchase_reminder_rules',); args=['repurchase_reminder_rules']
2023-10-17 21:05:33,677 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('repurchase_reminder_rules',); args=['repurchase_reminder_rules']
2023-10-17 21:05:33,732 [DEBUG]    utils.py.execute [90] -- (0.055) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('repurchase_reminder_rules',); args=['repurchase_reminder_rules']
2023-10-17 21:05:33,762 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('repurchase_reminder_rules',); args=['repurchase_reminder_rules']
2023-10-17 21:05:33,829 [DEBUG]    utils.py.execute [90] -- (0.036) QUERY = 'SELECT * FROM "REPURCHASE_REMINDER_RULES" WHERE ROWNUM < 2 AND 1114 > 0' - PARAMS = (); args=None
2023-10-17 21:05:33,859 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('RESEARCH_REPORT_MANAGE',); args=['RESEARCH_REPORT_MANAGE']
2023-10-17 21:05:33,889 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('research_report_manage',); args=['research_report_manage']
2023-10-17 21:05:33,949 [DEBUG]    utils.py.execute [90] -- (0.029) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('research_report_manage',); args=['research_report_manage']
2023-10-17 21:05:34,006 [DEBUG]    utils.py.execute [90] -- (0.057) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('research_report_manage',); args=['research_report_manage']
2023-10-17 21:05:34,037 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('research_report_manage',); args=['research_report_manage']
2023-10-17 21:05:34,098 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('research_report_manage',); args=['research_report_manage']
2023-10-17 21:05:34,153 [DEBUG]    utils.py.execute [90] -- (0.053) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('research_report_manage',); args=['research_report_manage']
2023-10-17 21:05:34,183 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('research_report_manage',); args=['research_report_manage']
2023-10-17 21:05:34,249 [DEBUG]    utils.py.execute [90] -- (0.036) QUERY = 'SELECT * FROM "RESEARCH_REPORT_MANAGE" WHERE ROWNUM < 2 AND 1115 > 0' - PARAMS = (); args=None
2023-10-17 21:05:34,279 [DEBUG]    utils.py.execute [90] -- (0.029) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('REVIEW_ATTACHMENT_TEST',); args=['REVIEW_ATTACHMENT_TEST']
2023-10-17 21:05:34,310 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('review_attachment_test',); args=['review_attachment_test']
2023-10-17 21:05:34,370 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('review_attachment_test',); args=['review_attachment_test']
2023-10-17 21:05:34,429 [DEBUG]    utils.py.execute [90] -- (0.059) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('review_attachment_test',); args=['review_attachment_test']
2023-10-17 21:05:34,459 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('review_attachment_test',); args=['review_attachment_test']
2023-10-17 21:05:34,524 [DEBUG]    utils.py.execute [90] -- (0.033) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('review_attachment_test',); args=['review_attachment_test']
2023-10-17 21:05:34,580 [DEBUG]    utils.py.execute [90] -- (0.055) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('review_attachment_test',); args=['review_attachment_test']
2023-10-17 21:05:34,612 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('review_attachment_test',); args=['review_attachment_test']
2023-10-17 21:05:34,680 [DEBUG]    utils.py.execute [90] -- (0.036) QUERY = 'SELECT * FROM "REVIEW_ATTACHMENT_TEST" WHERE ROWNUM < 2 AND 1116 > 0' - PARAMS = (); args=None
2023-10-17 21:05:34,713 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('REVIEW_TEST',); args=['REVIEW_TEST']
2023-10-17 21:05:34,744 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('review_test',); args=['review_test']
2023-10-17 21:05:34,805 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('review_test',); args=['review_test']
2023-10-17 21:05:34,863 [DEBUG]    utils.py.execute [90] -- (0.057) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('review_test',); args=['review_test']
2023-10-17 21:05:34,895 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('review_test',); args=['review_test']
2023-10-17 21:05:34,956 [DEBUG]    utils.py.execute [90] -- (0.029) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('review_test',); args=['review_test']
2023-10-17 21:05:35,011 [DEBUG]    utils.py.execute [90] -- (0.054) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('review_test',); args=['review_test']
2023-10-17 21:05:35,042 [DEBUG]    utils.py.execute [90] -- (0.029) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('review_test',); args=['review_test']
2023-10-17 21:05:35,221 [DEBUG]    utils.py.execute [90] -- (0.148) QUERY = 'SELECT * FROM "REVIEW_TEST" WHERE ROWNUM < 2 AND 1117 > 0' - PARAMS = (); args=None
2023-10-17 21:05:35,255 [DEBUG]    utils.py.execute [90] -- (0.033) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('RISKELEMENTS',); args=['RISKELEMENTS']
2023-10-17 21:05:35,286 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('riskelements',); args=['riskelements']
2023-10-17 21:05:35,348 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('riskelements',); args=['riskelements']
2023-10-17 21:05:35,408 [DEBUG]    utils.py.execute [90] -- (0.059) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('riskelements',); args=['riskelements']
2023-10-17 21:05:35,439 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('riskelements',); args=['riskelements']
2023-10-17 21:05:35,500 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('riskelements',); args=['riskelements']
2023-10-17 21:05:35,555 [DEBUG]    utils.py.execute [90] -- (0.054) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('riskelements',); args=['riskelements']
2023-10-17 21:05:35,587 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('riskelements',); args=['riskelements']
2023-10-17 21:05:35,656 [DEBUG]    utils.py.execute [90] -- (0.037) QUERY = 'SELECT * FROM "RISKELEMENTS" WHERE ROWNUM < 2 AND 1118 > 0' - PARAMS = (); args=None
2023-10-17 21:05:35,687 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('RPA_REQUEST',); args=['RPA_REQUEST']
2023-10-17 21:05:35,720 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('rpa_request',); args=['rpa_request']
2023-10-17 21:05:35,783 [DEBUG]    utils.py.execute [90] -- (0.033) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('rpa_request',); args=['rpa_request']
2023-10-17 21:05:35,845 [DEBUG]    utils.py.execute [90] -- (0.061) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('rpa_request',); args=['rpa_request']
2023-10-17 21:05:35,976 [DEBUG]    utils.py.execute [90] -- (0.129) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('rpa_request',); args=['rpa_request']
2023-10-17 21:05:36,126 [DEBUG]    utils.py.execute [90] -- (0.120) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('rpa_request',); args=['rpa_request']
2023-10-17 21:05:36,182 [DEBUG]    utils.py.execute [90] -- (0.054) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('rpa_request',); args=['rpa_request']
2023-10-17 21:05:36,215 [DEBUG]    utils.py.execute [90] -- (0.033) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('rpa_request',); args=['rpa_request']
2023-10-17 21:05:36,286 [DEBUG]    utils.py.execute [90] -- (0.039) QUERY = 'SELECT * FROM "RPA_REQUEST" WHERE ROWNUM < 2 AND 1119 > 0' - PARAMS = (); args=None
2023-10-17 21:05:36,316 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('RPT_MAPPING',); args=['RPT_MAPPING']
2023-10-17 21:05:36,349 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('rpt_mapping',); args=['rpt_mapping']
2023-10-17 21:05:36,381 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('rpt_mapping',); args=['rpt_mapping']
2023-10-17 21:05:36,413 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('rpt_mapping',); args=['rpt_mapping']
2023-10-17 21:05:36,444 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('rpt_mapping',); args=['rpt_mapping']
2023-10-17 21:05:36,476 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('rpt_mapping',); args=['rpt_mapping']
2023-10-17 21:05:36,509 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('rpt_mapping',); args=['rpt_mapping']
2023-10-17 21:05:36,539 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('rpt_mapping',); args=['rpt_mapping']
2023-10-17 21:05:36,605 [DEBUG]    utils.py.execute [90] -- (0.034) QUERY = 'SELECT * FROM "RPT_MAPPING" WHERE ROWNUM < 2 AND 1120 > 0' - PARAMS = (); args=None
2023-10-17 21:05:36,636 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('S3_FILE_INFO',); args=['S3_FILE_INFO']
2023-10-17 21:05:36,669 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('s3_file_info',); args=['s3_file_info']
2023-10-17 21:05:36,731 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('s3_file_info',); args=['s3_file_info']
2023-10-17 21:05:36,789 [DEBUG]    utils.py.execute [90] -- (0.057) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('s3_file_info',); args=['s3_file_info']
2023-10-17 21:05:36,820 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('s3_file_info',); args=['s3_file_info']
2023-10-17 21:05:36,982 [DEBUG]    utils.py.execute [90] -- (0.131) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('s3_file_info',); args=['s3_file_info']
2023-10-17 21:05:37,148 [DEBUG]    utils.py.execute [90] -- (0.164) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('s3_file_info',); args=['s3_file_info']
2023-10-17 21:05:37,182 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('s3_file_info',); args=['s3_file_info']
2023-10-17 21:05:37,244 [DEBUG]    utils.py.execute [90] -- (0.033) QUERY = 'SELECT * FROM "S3_FILE_INFO" WHERE ROWNUM < 2 AND 1121 > 0' - PARAMS = (); args=None
2023-10-17 21:05:37,277 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('S_CUST_APPR_INFO',); args=['S_CUST_APPR_INFO']
2023-10-17 21:05:37,309 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('s_cust_appr_info',); args=['s_cust_appr_info']
2023-10-17 21:05:37,371 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('s_cust_appr_info',); args=['s_cust_appr_info']
2023-10-17 21:05:37,430 [DEBUG]    utils.py.execute [90] -- (0.059) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('s_cust_appr_info',); args=['s_cust_appr_info']
2023-10-17 21:05:37,462 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('s_cust_appr_info',); args=['s_cust_appr_info']
2023-10-17 21:05:37,523 [DEBUG]    utils.py.execute [90] -- (0.029) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('s_cust_appr_info',); args=['s_cust_appr_info']
2023-10-17 21:05:37,578 [DEBUG]    utils.py.execute [90] -- (0.055) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('s_cust_appr_info',); args=['s_cust_appr_info']
2023-10-17 21:05:37,609 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('s_cust_appr_info',); args=['s_cust_appr_info']
2023-10-17 21:05:37,673 [DEBUG]    utils.py.execute [90] -- (0.033) QUERY = 'SELECT * FROM "S_CUST_APPR_INFO" WHERE ROWNUM < 2 AND 1122 > 0' - PARAMS = (); args=None
2023-10-17 21:05:37,706 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('S_CUST_CUST_REL',); args=['S_CUST_CUST_REL']
2023-10-17 21:05:37,738 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('s_cust_cust_rel',); args=['s_cust_cust_rel']
2023-10-17 21:05:37,799 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('s_cust_cust_rel',); args=['s_cust_cust_rel']
2023-10-17 21:05:37,857 [DEBUG]    utils.py.execute [90] -- (0.057) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('s_cust_cust_rel',); args=['s_cust_cust_rel']
2023-10-17 21:05:38,002 [DEBUG]    utils.py.execute [90] -- (0.144) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('s_cust_cust_rel',); args=['s_cust_cust_rel']
2023-10-17 21:05:38,153 [DEBUG]    utils.py.execute [90] -- (0.121) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('s_cust_cust_rel',); args=['s_cust_cust_rel']
2023-10-17 21:05:38,208 [DEBUG]    utils.py.execute [90] -- (0.054) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('s_cust_cust_rel',); args=['s_cust_cust_rel']
2023-10-17 21:05:38,239 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('s_cust_cust_rel',); args=['s_cust_cust_rel']
2023-10-17 21:05:38,301 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = 'SELECT * FROM "S_CUST_CUST_REL" WHERE ROWNUM < 2 AND 1123 > 0' - PARAMS = (); args=None
2023-10-17 21:05:38,333 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('S_ORG_CUST_BASE_INFO',); args=['S_ORG_CUST_BASE_INFO']
2023-10-17 21:05:38,366 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('s_org_cust_base_info',); args=['s_org_cust_base_info']
2023-10-17 21:05:38,430 [DEBUG]    utils.py.execute [90] -- (0.033) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('s_org_cust_base_info',); args=['s_org_cust_base_info']
2023-10-17 21:05:38,490 [DEBUG]    utils.py.execute [90] -- (0.059) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('s_org_cust_base_info',); args=['s_org_cust_base_info']
2023-10-17 21:05:38,522 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('s_org_cust_base_info',); args=['s_org_cust_base_info']
2023-10-17 21:05:38,584 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('s_org_cust_base_info',); args=['s_org_cust_base_info']
2023-10-17 21:05:38,640 [DEBUG]    utils.py.execute [90] -- (0.055) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('s_org_cust_base_info',); args=['s_org_cust_base_info']
2023-10-17 21:05:38,671 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('s_org_cust_base_info',); args=['s_org_cust_base_info']
2023-10-17 21:05:38,740 [DEBUG]    utils.py.execute [90] -- (0.038) QUERY = 'SELECT * FROM "S_ORG_CUST_BASE_INFO" WHERE ROWNUM < 2 AND 1124 > 0' - PARAMS = (); args=None
2023-10-17 21:05:38,778 [DEBUG]    utils.py.execute [90] -- (0.037) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('S_ORG_CUST_CERT_INFO',); args=['S_ORG_CUST_CERT_INFO']
2023-10-17 21:05:38,811 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('s_org_cust_cert_info',); args=['s_org_cust_cert_info']
2023-10-17 21:05:38,981 [DEBUG]    utils.py.execute [90] -- (0.133) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('s_org_cust_cert_info',); args=['s_org_cust_cert_info']
2023-10-17 21:05:39,040 [DEBUG]    utils.py.execute [90] -- (0.057) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('s_org_cust_cert_info',); args=['s_org_cust_cert_info']
2023-10-17 21:05:39,163 [DEBUG]    utils.py.execute [90] -- (0.121) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('s_org_cust_cert_info',); args=['s_org_cust_cert_info']
2023-10-17 21:05:39,224 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('s_org_cust_cert_info',); args=['s_org_cust_cert_info']
2023-10-17 21:05:39,279 [DEBUG]    utils.py.execute [90] -- (0.054) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('s_org_cust_cert_info',); args=['s_org_cust_cert_info']
2023-10-17 21:05:39,310 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('s_org_cust_cert_info',); args=['s_org_cust_cert_info']
2023-10-17 21:05:39,383 [DEBUG]    utils.py.execute [90] -- (0.043) QUERY = 'SELECT * FROM "S_ORG_CUST_CERT_INFO" WHERE ROWNUM < 2 AND 1125 > 0' - PARAMS = (); args=None
2023-10-17 21:05:39,414 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('S_PROD_CUST_BASE_INFO',); args=['S_PROD_CUST_BASE_INFO']
2023-10-17 21:05:39,445 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('s_prod_cust_base_info',); args=['s_prod_cust_base_info']
2023-10-17 21:05:39,507 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('s_prod_cust_base_info',); args=['s_prod_cust_base_info']
2023-10-17 21:05:39,567 [DEBUG]    utils.py.execute [90] -- (0.060) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('s_prod_cust_base_info',); args=['s_prod_cust_base_info']
2023-10-17 21:05:39,599 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('s_prod_cust_base_info',); args=['s_prod_cust_base_info']
2023-10-17 21:05:39,665 [DEBUG]    utils.py.execute [90] -- (0.033) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('s_prod_cust_base_info',); args=['s_prod_cust_base_info']
2023-10-17 21:05:39,722 [DEBUG]    utils.py.execute [90] -- (0.056) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('s_prod_cust_base_info',); args=['s_prod_cust_base_info']
2023-10-17 21:05:39,756 [DEBUG]    utils.py.execute [90] -- (0.033) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('s_prod_cust_base_info',); args=['s_prod_cust_base_info']
2023-10-17 21:05:39,827 [DEBUG]    utils.py.execute [90] -- (0.039) QUERY = 'SELECT * FROM "S_PROD_CUST_BASE_INFO" WHERE ROWNUM < 2 AND 1126 > 0' - PARAMS = (); args=None
2023-10-17 21:05:39,858 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('SALES_AGENCY',); args=['SALES_AGENCY']
2023-10-17 21:05:39,888 [DEBUG]    utils.py.execute [90] -- (0.029) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('sales_agency',); args=['sales_agency']
2023-10-17 21:05:39,949 [DEBUG]    utils.py.execute [90] -- (0.029) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('sales_agency',); args=['sales_agency']
2023-10-17 21:05:40,005 [DEBUG]    utils.py.execute [90] -- (0.055) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('sales_agency',); args=['sales_agency']
2023-10-17 21:05:40,036 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('sales_agency',); args=['sales_agency']
2023-10-17 21:05:40,100 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('sales_agency',); args=['sales_agency']
2023-10-17 21:05:40,153 [DEBUG]    utils.py.execute [90] -- (0.052) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('sales_agency',); args=['sales_agency']
2023-10-17 21:05:40,184 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('sales_agency',); args=['sales_agency']
2023-10-17 21:05:40,246 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = 'SELECT * FROM "SALES_AGENCY" WHERE ROWNUM < 2 AND 1127 > 0' - PARAMS = (); args=None
2023-10-17 21:05:40,279 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('SC_CONTRACT',); args=['SC_CONTRACT']
2023-10-17 21:05:40,311 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('sc_contract',); args=['sc_contract']
2023-10-17 21:05:40,342 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('sc_contract',); args=['sc_contract']
2023-10-17 21:05:40,377 [DEBUG]    utils.py.execute [90] -- (0.034) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('sc_contract',); args=['sc_contract']
2023-10-17 21:05:40,409 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('sc_contract',); args=['sc_contract']
2023-10-17 21:05:40,440 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('sc_contract',); args=['sc_contract']
2023-10-17 21:05:40,473 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('sc_contract',); args=['sc_contract']
2023-10-17 21:05:40,505 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('sc_contract',); args=['sc_contract']
2023-10-17 21:05:40,576 [DEBUG]    utils.py.execute [90] -- (0.039) QUERY = 'SELECT * FROM "SC_CONTRACT" WHERE ROWNUM < 2 AND 1128 > 0' - PARAMS = (); args=None
2023-10-17 21:05:40,607 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('SCHEDULE_LOCK',); args=['SCHEDULE_LOCK']
2023-10-17 21:05:40,638 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('schedule_lock',); args=['schedule_lock']
2023-10-17 21:05:40,699 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('schedule_lock',); args=['schedule_lock']
2023-10-17 21:05:40,757 [DEBUG]    utils.py.execute [90] -- (0.058) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('schedule_lock',); args=['schedule_lock']
2023-10-17 21:05:40,789 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('schedule_lock',); args=['schedule_lock']
2023-10-17 21:05:40,851 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('schedule_lock',); args=['schedule_lock']
2023-10-17 21:05:40,907 [DEBUG]    utils.py.execute [90] -- (0.054) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('schedule_lock',); args=['schedule_lock']
2023-10-17 21:05:40,938 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('schedule_lock',); args=['schedule_lock']
2023-10-17 21:05:41,000 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = 'SELECT * FROM "SCHEDULE_LOCK" WHERE ROWNUM < 2 AND 1129 > 0' - PARAMS = (); args=None
2023-10-17 21:05:41,032 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('SECU_PRINCIPAL',); args=['SECU_PRINCIPAL']
2023-10-17 21:05:41,063 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('secu_principal',); args=['secu_principal']
2023-10-17 21:05:41,125 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('secu_principal',); args=['secu_principal']
2023-10-17 21:05:41,186 [DEBUG]    utils.py.execute [90] -- (0.060) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('secu_principal',); args=['secu_principal']
2023-10-17 21:05:41,216 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('secu_principal',); args=['secu_principal']
2023-10-17 21:05:41,278 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('secu_principal',); args=['secu_principal']
2023-10-17 21:05:41,335 [DEBUG]    utils.py.execute [90] -- (0.055) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('secu_principal',); args=['secu_principal']
2023-10-17 21:05:41,367 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('secu_principal',); args=['secu_principal']
2023-10-17 21:05:41,431 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = 'SELECT * FROM "SECU_PRINCIPAL" WHERE ROWNUM < 2 AND 1130 > 0' - PARAMS = (); args=None
2023-10-17 21:05:41,464 [DEBUG]    utils.py.execute [90] -- (0.033) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('SECURITY_ASCRIPTION',); args=['SECURITY_ASCRIPTION']
2023-10-17 21:05:41,494 [DEBUG]    utils.py.execute [90] -- (0.029) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('security_ascription',); args=['security_ascription']
2023-10-17 21:05:41,555 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('security_ascription',); args=['security_ascription']
2023-10-17 21:05:41,612 [DEBUG]    utils.py.execute [90] -- (0.057) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('security_ascription',); args=['security_ascription']
2023-10-17 21:05:41,643 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('security_ascription',); args=['security_ascription']
2023-10-17 21:05:41,705 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('security_ascription',); args=['security_ascription']
2023-10-17 21:05:41,758 [DEBUG]    utils.py.execute [90] -- (0.052) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('security_ascription',); args=['security_ascription']
2023-10-17 21:05:41,789 [DEBUG]    utils.py.execute [90] -- (0.029) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('security_ascription',); args=['security_ascription']
2023-10-17 21:05:41,855 [DEBUG]    utils.py.execute [90] -- (0.035) QUERY = 'SELECT * FROM "SECURITY_ASCRIPTION" WHERE ROWNUM < 2 AND 1131 > 0' - PARAMS = (); args=None
2023-10-17 21:05:41,887 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('SECURITY_INFO',); args=['SECURITY_INFO']
2023-10-17 21:05:41,917 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('security_info',); args=['security_info']
2023-10-17 21:05:41,984 [DEBUG]    utils.py.execute [90] -- (0.033) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('security_info',); args=['security_info']
2023-10-17 21:05:42,041 [DEBUG]    utils.py.execute [90] -- (0.057) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('security_info',); args=['security_info']
2023-10-17 21:05:42,071 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('security_info',); args=['security_info']
2023-10-17 21:05:42,132 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('security_info',); args=['security_info']
2023-10-17 21:05:52,877 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('AML_BENEFICIARY',); args=['AML_BENEFICIARY']
2023-10-17 21:05:52,908 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('AML_BENEFICIARY',); args=['AML_BENEFICIARY']
2023-10-17 21:05:52,972 [DEBUG]    utils.py.execute [90] -- (0.033) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('AML_BENEFICIARY',); args=['AML_BENEFICIARY']
2023-10-17 21:05:53,018 [DEBUG]    utils.py.execute [90] -- (0.044) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('AML_BENEFICIARY',); args=['AML_BENEFICIARY']
2023-10-17 21:05:53,048 [DEBUG]    utils.py.execute [90] -- (0.029) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('AML_BENEFICIARY',); args=['AML_BENEFICIARY']
2023-10-17 21:05:53,109 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('AML_BENEFICIARY',); args=['AML_BENEFICIARY']
2023-10-17 21:05:53,146 [DEBUG]    utils.py.execute [90] -- (0.035) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('AML_BENEFICIARY',); args=['AML_BENEFICIARY']
2023-10-17 21:05:53,176 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('AML_BENEFICIARY',); args=['AML_BENEFICIARY']
2023-10-17 21:05:53,237 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = 'SELECT * FROM "AML_BENEFICIARY" WHERE ROWNUM < 2 AND 2 > 0' - PARAMS = (); args=None
2023-10-17 21:06:19,379 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('AML_COUNTERPARTY',); args=['AML_COUNTERPARTY']
2023-10-17 21:06:19,415 [DEBUG]    utils.py.execute [90] -- (0.034) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('AML_COUNTERPARTY',); args=['AML_COUNTERPARTY']
2023-10-17 21:06:19,478 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('AML_COUNTERPARTY',); args=['AML_COUNTERPARTY']
2023-10-17 21:06:19,523 [DEBUG]    utils.py.execute [90] -- (0.044) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('AML_COUNTERPARTY',); args=['AML_COUNTERPARTY']
2023-10-17 21:06:19,558 [DEBUG]    utils.py.execute [90] -- (0.034) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('AML_COUNTERPARTY',); args=['AML_COUNTERPARTY']
2023-10-17 21:06:19,620 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('AML_COUNTERPARTY',); args=['AML_COUNTERPARTY']
2023-10-17 21:06:19,659 [DEBUG]    utils.py.execute [90] -- (0.039) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('AML_COUNTERPARTY',); args=['AML_COUNTERPARTY']
2023-10-17 21:06:19,691 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('AML_COUNTERPARTY',); args=['AML_COUNTERPARTY']
2023-10-17 21:06:19,754 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = 'SELECT * FROM "AML_COUNTERPARTY" WHERE ROWNUM < 2 AND 2 > 0' - PARAMS = (); args=None
2023-10-17 21:06:37,987 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('AORG',); args=['AORG']
2023-10-17 21:06:38,019 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('AORG',); args=['AORG']
2023-10-17 21:06:38,082 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('AORG',); args=['AORG']
2023-10-17 21:06:38,127 [DEBUG]    utils.py.execute [90] -- (0.045) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('AORG',); args=['AORG']
2023-10-17 21:06:38,159 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('AORG',); args=['AORG']
2023-10-17 21:06:38,221 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('AORG',); args=['AORG']
2023-10-17 21:06:38,261 [DEBUG]    utils.py.execute [90] -- (0.039) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('AORG',); args=['AORG']
2023-10-17 21:06:38,293 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('AORG',); args=['AORG']
2023-10-17 21:06:38,357 [DEBUG]    utils.py.execute [90] -- (0.033) QUERY = 'SELECT * FROM "AORG" WHERE ROWNUM < 2 AND 2 > 0' - PARAMS = (); args=None
2023-10-17 21:06:52,249 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('AUSER',); args=['AUSER']
2023-10-17 21:06:52,281 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('AUSER',); args=['AUSER']
2023-10-17 21:06:52,343 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('AUSER',); args=['AUSER']
2023-10-17 21:06:52,405 [DEBUG]    utils.py.execute [90] -- (0.062) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('AUSER',); args=['AUSER']
2023-10-17 21:06:52,436 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('AUSER',); args=['AUSER']
2023-10-17 21:06:52,497 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('AUSER',); args=['AUSER']
2023-10-17 21:06:52,560 [DEBUG]    utils.py.execute [90] -- (0.063) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('AUSER',); args=['AUSER']
2023-10-17 21:06:52,593 [DEBUG]    utils.py.execute [90] -- (0.033) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('AUSER',); args=['AUSER']
2023-10-17 21:06:52,662 [DEBUG]    utils.py.execute [90] -- (0.036) QUERY = 'SELECT * FROM "AUSER" WHERE ROWNUM < 2 AND 2 > 0' - PARAMS = (); args=None
2023-10-17 21:07:09,266 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('BENEFICIARY_ORG',); args=['BENEFICIARY_ORG']
2023-10-17 21:07:09,298 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('BENEFICIARY_ORG',); args=['BENEFICIARY_ORG']
2023-10-17 21:07:09,361 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('BENEFICIARY_ORG',); args=['BENEFICIARY_ORG']
2023-10-17 21:07:09,428 [DEBUG]    utils.py.execute [90] -- (0.066) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('BENEFICIARY_ORG',); args=['BENEFICIARY_ORG']
2023-10-17 21:07:09,461 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('BENEFICIARY_ORG',); args=['BENEFICIARY_ORG']
2023-10-17 21:07:09,523 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('BENEFICIARY_ORG',); args=['BENEFICIARY_ORG']
2023-10-17 21:07:09,586 [DEBUG]    utils.py.execute [90] -- (0.062) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('BENEFICIARY_ORG',); args=['BENEFICIARY_ORG']
2023-10-17 21:07:09,618 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('BENEFICIARY_ORG',); args=['BENEFICIARY_ORG']
2023-10-17 21:07:09,683 [DEBUG]    utils.py.execute [90] -- (0.034) QUERY = 'SELECT * FROM "BENEFICIARY_ORG" WHERE ROWNUM < 2 AND 2 > 0' - PARAMS = (); args=None
2023-10-17 21:07:29,742 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('CLIENT_REVIEW_BUFFER',); args=['CLIENT_REVIEW_BUFFER']
2023-10-17 21:07:29,773 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('CLIENT_REVIEW_BUFFER',); args=['CLIENT_REVIEW_BUFFER']
2023-10-17 21:07:29,804 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('CLIENT_REVIEW_BUFFER',); args=['CLIENT_REVIEW_BUFFER']
2023-10-17 21:07:29,850 [DEBUG]    utils.py.execute [90] -- (0.047) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('CLIENT_REVIEW_BUFFER',); args=['CLIENT_REVIEW_BUFFER']
2023-10-17 21:07:29,881 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('CLIENT_REVIEW_BUFFER',); args=['CLIENT_REVIEW_BUFFER']
2023-10-17 21:07:29,913 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('CLIENT_REVIEW_BUFFER',); args=['CLIENT_REVIEW_BUFFER']
2023-10-17 21:07:29,958 [DEBUG]    utils.py.execute [90] -- (0.044) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('CLIENT_REVIEW_BUFFER',); args=['CLIENT_REVIEW_BUFFER']
2023-10-17 21:07:29,989 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('CLIENT_REVIEW_BUFFER',); args=['CLIENT_REVIEW_BUFFER']
2023-10-17 21:07:30,054 [DEBUG]    utils.py.execute [90] -- (0.034) QUERY = 'SELECT * FROM "CLIENT_REVIEW_BUFFER" WHERE ROWNUM < 2 AND 2 > 0' - PARAMS = (); args=None
2023-10-17 21:07:46,699 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('CLIENT_REVIEW_COUNTERPARTY',); args=['CLIENT_REVIEW_COUNTERPARTY']
2023-10-17 21:07:46,732 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('CLIENT_REVIEW_COUNTERPARTY',); args=['CLIENT_REVIEW_COUNTERPARTY']
2023-10-17 21:07:46,793 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('CLIENT_REVIEW_COUNTERPARTY',); args=['CLIENT_REVIEW_COUNTERPARTY']
2023-10-17 21:07:46,844 [DEBUG]    utils.py.execute [90] -- (0.050) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('CLIENT_REVIEW_COUNTERPARTY',); args=['CLIENT_REVIEW_COUNTERPARTY']
2023-10-17 21:07:46,876 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('CLIENT_REVIEW_COUNTERPARTY',); args=['CLIENT_REVIEW_COUNTERPARTY']
2023-10-17 21:07:46,954 [DEBUG]    utils.py.execute [90] -- (0.047) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('CLIENT_REVIEW_COUNTERPARTY',); args=['CLIENT_REVIEW_COUNTERPARTY']
2023-10-17 21:07:47,000 [DEBUG]    utils.py.execute [90] -- (0.043) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('CLIENT_REVIEW_COUNTERPARTY',); args=['CLIENT_REVIEW_COUNTERPARTY']
2023-10-17 21:07:47,030 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('CLIENT_REVIEW_COUNTERPARTY',); args=['CLIENT_REVIEW_COUNTERPARTY']
2023-10-17 21:07:47,095 [DEBUG]    utils.py.execute [90] -- (0.034) QUERY = 'SELECT * FROM "CLIENT_REVIEW_COUNTERPARTY" WHERE ROWNUM < 2 AND 2 > 0' - PARAMS = (); args=None
2023-10-17 21:08:06,562 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('CLIENT_REVIEW_DETAIL',); args=['CLIENT_REVIEW_DETAIL']
2023-10-17 21:08:06,594 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('CLIENT_REVIEW_DETAIL',); args=['CLIENT_REVIEW_DETAIL']
2023-10-17 21:08:06,659 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('CLIENT_REVIEW_DETAIL',); args=['CLIENT_REVIEW_DETAIL']
2023-10-17 21:08:06,724 [DEBUG]    utils.py.execute [90] -- (0.065) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('CLIENT_REVIEW_DETAIL',); args=['CLIENT_REVIEW_DETAIL']
2023-10-17 21:08:06,755 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('CLIENT_REVIEW_DETAIL',); args=['CLIENT_REVIEW_DETAIL']
2023-10-17 21:08:06,816 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('CLIENT_REVIEW_DETAIL',); args=['CLIENT_REVIEW_DETAIL']
2023-10-17 21:08:06,880 [DEBUG]    utils.py.execute [90] -- (0.063) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('CLIENT_REVIEW_DETAIL',); args=['CLIENT_REVIEW_DETAIL']
2023-10-17 21:08:06,911 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('CLIENT_REVIEW_DETAIL',); args=['CLIENT_REVIEW_DETAIL']
2023-10-17 21:08:06,977 [DEBUG]    utils.py.execute [90] -- (0.034) QUERY = 'SELECT * FROM "CLIENT_REVIEW_DETAIL" WHERE ROWNUM < 2 AND 2 > 0' - PARAMS = (); args=None
2023-10-17 21:08:23,509 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('CLIENT_REVIEW_FILE_RECORD',); args=['CLIENT_REVIEW_FILE_RECORD']
2023-10-17 21:08:23,541 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('CLIENT_REVIEW_FILE_RECORD',); args=['CLIENT_REVIEW_FILE_RECORD']
2023-10-17 21:08:23,606 [DEBUG]    utils.py.execute [90] -- (0.033) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('CLIENT_REVIEW_FILE_RECORD',); args=['CLIENT_REVIEW_FILE_RECORD']
2023-10-17 21:08:23,693 [DEBUG]    utils.py.execute [90] -- (0.086) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('CLIENT_REVIEW_FILE_RECORD',); args=['CLIENT_REVIEW_FILE_RECORD']
2023-10-17 21:08:23,736 [DEBUG]    utils.py.execute [90] -- (0.042) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('CLIENT_REVIEW_FILE_RECORD',); args=['CLIENT_REVIEW_FILE_RECORD']
2023-10-17 21:08:23,798 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('CLIENT_REVIEW_FILE_RECORD',); args=['CLIENT_REVIEW_FILE_RECORD']
2023-10-17 21:08:23,864 [DEBUG]    utils.py.execute [90] -- (0.066) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('CLIENT_REVIEW_FILE_RECORD',); args=['CLIENT_REVIEW_FILE_RECORD']
2023-10-17 21:08:23,894 [DEBUG]    utils.py.execute [90] -- (0.029) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('CLIENT_REVIEW_FILE_RECORD',); args=['CLIENT_REVIEW_FILE_RECORD']
2023-10-17 21:08:23,962 [DEBUG]    utils.py.execute [90] -- (0.034) QUERY = 'SELECT * FROM "CLIENT_REVIEW_FILE_RECORD" WHERE ROWNUM < 2 AND 2 > 0' - PARAMS = (); args=None
2023-10-17 21:08:44,557 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('CLIENT_REVIEW_RECORD',); args=['CLIENT_REVIEW_RECORD']
2023-10-17 21:08:44,589 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('CLIENT_REVIEW_RECORD',); args=['CLIENT_REVIEW_RECORD']
2023-10-17 21:08:44,620 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('CLIENT_REVIEW_RECORD',); args=['CLIENT_REVIEW_RECORD']
2023-10-17 21:08:44,672 [DEBUG]    utils.py.execute [90] -- (0.051) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('CLIENT_REVIEW_RECORD',); args=['CLIENT_REVIEW_RECORD']
2023-10-17 21:08:44,711 [DEBUG]    utils.py.execute [90] -- (0.038) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('CLIENT_REVIEW_RECORD',); args=['CLIENT_REVIEW_RECORD']
2023-10-17 21:08:44,754 [DEBUG]    utils.py.execute [90] -- (0.041) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('CLIENT_REVIEW_RECORD',); args=['CLIENT_REVIEW_RECORD']
2023-10-17 21:08:44,813 [DEBUG]    utils.py.execute [90] -- (0.059) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('CLIENT_REVIEW_RECORD',); args=['CLIENT_REVIEW_RECORD']
2023-10-17 21:08:44,844 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('CLIENT_REVIEW_RECORD',); args=['CLIENT_REVIEW_RECORD']
2023-10-17 21:08:44,910 [DEBUG]    utils.py.execute [90] -- (0.034) QUERY = 'SELECT * FROM "CLIENT_REVIEW_RECORD" WHERE ROWNUM < 2 AND 2 > 0' - PARAMS = (); args=None
2023-10-17 21:09:03,855 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('COUNTERPARTY_ORG',); args=['COUNTERPARTY_ORG']
2023-10-17 21:09:03,887 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('COUNTERPARTY_ORG',); args=['COUNTERPARTY_ORG']
2023-10-17 21:09:03,918 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('COUNTERPARTY_ORG',); args=['COUNTERPARTY_ORG']
2023-10-17 21:09:03,969 [DEBUG]    utils.py.execute [90] -- (0.050) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('COUNTERPARTY_ORG',); args=['COUNTERPARTY_ORG']
2023-10-17 21:09:04,001 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('COUNTERPARTY_ORG',); args=['COUNTERPARTY_ORG']
2023-10-17 21:09:04,031 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('COUNTERPARTY_ORG',); args=['COUNTERPARTY_ORG']
2023-10-17 21:09:04,076 [DEBUG]    utils.py.execute [90] -- (0.044) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('COUNTERPARTY_ORG',); args=['COUNTERPARTY_ORG']
2023-10-17 21:09:04,107 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('COUNTERPARTY_ORG',); args=['COUNTERPARTY_ORG']
2023-10-17 21:09:04,172 [DEBUG]    utils.py.execute [90] -- (0.034) QUERY = 'SELECT * FROM "COUNTERPARTY_ORG" WHERE ROWNUM < 2 AND 2 > 0' - PARAMS = (); args=None
2023-10-17 21:09:28,206 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('COUNTERPARTY_PROD_MONITOR_FLOW',); args=['COUNTERPARTY_PROD_MONITOR_FLOW']
2023-10-17 21:09:28,239 [DEBUG]    utils.py.execute [90] -- (0.033) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('COUNTERPARTY_PROD_MONITOR_FLOW',); args=['COUNTERPARTY_PROD_MONITOR_FLOW']
2023-10-17 21:09:28,300 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('COUNTERPARTY_PROD_MONITOR_FLOW',); args=['COUNTERPARTY_PROD_MONITOR_FLOW']
2023-10-17 21:09:28,350 [DEBUG]    utils.py.execute [90] -- (0.049) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('COUNTERPARTY_PROD_MONITOR_FLOW',); args=['COUNTERPARTY_PROD_MONITOR_FLOW']
2023-10-17 21:09:28,381 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('COUNTERPARTY_PROD_MONITOR_FLOW',); args=['COUNTERPARTY_PROD_MONITOR_FLOW']
2023-10-17 21:09:28,443 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('COUNTERPARTY_PROD_MONITOR_FLOW',); args=['COUNTERPARTY_PROD_MONITOR_FLOW']
2023-10-17 21:09:28,487 [DEBUG]    utils.py.execute [90] -- (0.043) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('COUNTERPARTY_PROD_MONITOR_FLOW',); args=['COUNTERPARTY_PROD_MONITOR_FLOW']
2023-10-17 21:09:28,518 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('COUNTERPARTY_PROD_MONITOR_FLOW',); args=['COUNTERPARTY_PROD_MONITOR_FLOW']
2023-10-17 21:09:28,584 [DEBUG]    utils.py.execute [90] -- (0.035) QUERY = 'SELECT * FROM "COUNTERPARTY_PROD_MONITOR_FLOW" WHERE ROWNUM < 2 AND 2 > 0' - PARAMS = (); args=None
2023-10-17 21:09:43,911 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('CRT_EXPIRED_RECORD',); args=['CRT_EXPIRED_RECORD']
2023-10-17 21:09:43,943 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('CRT_EXPIRED_RECORD',); args=['CRT_EXPIRED_RECORD']
2023-10-17 21:09:44,004 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('CRT_EXPIRED_RECORD',); args=['CRT_EXPIRED_RECORD']
2023-10-17 21:09:44,055 [DEBUG]    utils.py.execute [90] -- (0.050) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('CRT_EXPIRED_RECORD',); args=['CRT_EXPIRED_RECORD']
2023-10-17 21:09:44,087 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('CRT_EXPIRED_RECORD',); args=['CRT_EXPIRED_RECORD']
2023-10-17 21:09:44,149 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('CRT_EXPIRED_RECORD',); args=['CRT_EXPIRED_RECORD']
2023-10-17 21:09:44,195 [DEBUG]    utils.py.execute [90] -- (0.045) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('CRT_EXPIRED_RECORD',); args=['CRT_EXPIRED_RECORD']
2023-10-17 21:09:44,237 [DEBUG]    utils.py.execute [90] -- (0.042) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('CRT_EXPIRED_RECORD',); args=['CRT_EXPIRED_RECORD']
2023-10-17 21:09:44,313 [DEBUG]    utils.py.execute [90] -- (0.035) QUERY = 'SELECT * FROM "CRT_EXPIRED_RECORD" WHERE ROWNUM < 2 AND 2 > 0' - PARAMS = (); args=None
2023-10-17 21:10:01,270 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('CTPTY_INFO_UPDATE_RECORD',); args=['CTPTY_INFO_UPDATE_RECORD']
2023-10-17 21:10:01,303 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('CTPTY_INFO_UPDATE_RECORD',); args=['CTPTY_INFO_UPDATE_RECORD']
2023-10-17 21:10:01,366 [DEBUG]    utils.py.execute [90] -- (0.033) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('CTPTY_INFO_UPDATE_RECORD',); args=['CTPTY_INFO_UPDATE_RECORD']
2023-10-17 21:10:01,420 [DEBUG]    utils.py.execute [90] -- (0.052) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('CTPTY_INFO_UPDATE_RECORD',); args=['CTPTY_INFO_UPDATE_RECORD']
2023-10-17 21:10:01,452 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('CTPTY_INFO_UPDATE_RECORD',); args=['CTPTY_INFO_UPDATE_RECORD']
2023-10-17 21:10:01,520 [DEBUG]    utils.py.execute [90] -- (0.036) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('CTPTY_INFO_UPDATE_RECORD',); args=['CTPTY_INFO_UPDATE_RECORD']
2023-10-17 21:10:01,566 [DEBUG]    utils.py.execute [90] -- (0.046) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('CTPTY_INFO_UPDATE_RECORD',); args=['CTPTY_INFO_UPDATE_RECORD']
2023-10-17 21:10:01,599 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('CTPTY_INFO_UPDATE_RECORD',); args=['CTPTY_INFO_UPDATE_RECORD']
2023-10-17 21:10:01,667 [DEBUG]    utils.py.execute [90] -- (0.035) QUERY = 'SELECT * FROM "CTPTY_INFO_UPDATE_RECORD" WHERE ROWNUM < 2 AND 2 > 0' - PARAMS = (); args=None
2023-10-17 21:10:18,786 [DEBUG]    utils.py.execute [90] -- (0.035) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('OTC_DERIVATIVE_COUNTERPARTY',); args=['OTC_DERIVATIVE_COUNTERPARTY']
2023-10-17 21:10:18,819 [DEBUG]    utils.py.execute [90] -- (0.033) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('OTC_DERIVATIVE_COUNTERPARTY',); args=['OTC_DERIVATIVE_COUNTERPARTY']
2023-10-17 21:10:18,883 [DEBUG]    utils.py.execute [90] -- (0.033) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('OTC_DERIVATIVE_COUNTERPARTY',); args=['OTC_DERIVATIVE_COUNTERPARTY']
2023-10-17 21:10:18,964 [DEBUG]    utils.py.execute [90] -- (0.082) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('OTC_DERIVATIVE_COUNTERPARTY',); args=['OTC_DERIVATIVE_COUNTERPARTY']
2023-10-17 21:10:19,027 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('OTC_DERIVATIVE_COUNTERPARTY',); args=['OTC_DERIVATIVE_COUNTERPARTY']
2023-10-17 21:10:19,089 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('OTC_DERIVATIVE_COUNTERPARTY',); args=['OTC_DERIVATIVE_COUNTERPARTY']
2023-10-17 21:10:19,173 [DEBUG]    utils.py.execute [90] -- (0.083) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('OTC_DERIVATIVE_COUNTERPARTY',); args=['OTC_DERIVATIVE_COUNTERPARTY']
2023-10-17 21:10:19,233 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('OTC_DERIVATIVE_COUNTERPARTY',); args=['OTC_DERIVATIVE_COUNTERPARTY']
2023-10-17 21:10:19,338 [DEBUG]    utils.py.execute [90] -- (0.042) QUERY = 'SELECT * FROM "OTC_DERIVATIVE_COUNTERPARTY" WHERE ROWNUM < 2 AND 2 > 0' - PARAMS = (); args=None
2023-10-17 21:10:38,157 [DEBUG]    utils.py.execute [90] -- (0.033) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('PROCESS_EXPIRED_REMIND',); args=['PROCESS_EXPIRED_REMIND']
2023-10-17 21:10:38,189 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('PROCESS_EXPIRED_REMIND',); args=['PROCESS_EXPIRED_REMIND']
2023-10-17 21:10:38,251 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('PROCESS_EXPIRED_REMIND',); args=['PROCESS_EXPIRED_REMIND']
2023-10-17 21:10:38,307 [DEBUG]    utils.py.execute [90] -- (0.056) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('PROCESS_EXPIRED_REMIND',); args=['PROCESS_EXPIRED_REMIND']
2023-10-17 21:10:38,340 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('PROCESS_EXPIRED_REMIND',); args=['PROCESS_EXPIRED_REMIND']
2023-10-17 21:10:38,401 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('PROCESS_EXPIRED_REMIND',); args=['PROCESS_EXPIRED_REMIND']
2023-10-17 21:10:38,453 [DEBUG]    utils.py.execute [90] -- (0.051) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('PROCESS_EXPIRED_REMIND',); args=['PROCESS_EXPIRED_REMIND']
2023-10-17 21:10:38,485 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('PROCESS_EXPIRED_REMIND',); args=['PROCESS_EXPIRED_REMIND']
2023-10-17 21:10:38,551 [DEBUG]    utils.py.execute [90] -- (0.035) QUERY = 'SELECT * FROM "PROCESS_EXPIRED_REMIND" WHERE ROWNUM < 2 AND 2 > 0' - PARAMS = (); args=None
2023-10-17 21:11:06,420 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('OTC_DERIVATIVE_COUNTERPARTY',); args=['OTC_DERIVATIVE_COUNTERPARTY']
2023-10-17 21:11:06,454 [DEBUG]    utils.py.execute [90] -- (0.033) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('OTC_DERIVATIVE_COUNTERPARTY',); args=['OTC_DERIVATIVE_COUNTERPARTY']
2023-10-17 21:11:06,593 [DEBUG]    utils.py.execute [90] -- (0.101) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('OTC_DERIVATIVE_COUNTERPARTY',); args=['OTC_DERIVATIVE_COUNTERPARTY']
2023-10-17 21:11:06,679 [DEBUG]    utils.py.execute [90] -- (0.087) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('OTC_DERIVATIVE_COUNTERPARTY',); args=['OTC_DERIVATIVE_COUNTERPARTY']
2023-10-17 21:11:06,740 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('OTC_DERIVATIVE_COUNTERPARTY',); args=['OTC_DERIVATIVE_COUNTERPARTY']
2023-10-17 21:11:06,801 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('OTC_DERIVATIVE_COUNTERPARTY',); args=['OTC_DERIVATIVE_COUNTERPARTY']
2023-10-17 21:11:06,880 [DEBUG]    utils.py.execute [90] -- (0.078) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('OTC_DERIVATIVE_COUNTERPARTY',); args=['OTC_DERIVATIVE_COUNTERPARTY']
2023-10-17 21:11:06,941 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('OTC_DERIVATIVE_COUNTERPARTY',); args=['OTC_DERIVATIVE_COUNTERPARTY']
2023-10-17 21:11:07,046 [DEBUG]    utils.py.execute [90] -- (0.041) QUERY = 'SELECT * FROM "OTC_DERIVATIVE_COUNTERPARTY" WHERE ROWNUM < 2 AND 2 > 0' - PARAMS = (); args=None
2023-10-17 21:11:33,048 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = '\n    SELECT ta.column_name, tb.table_name, tb.column_name\n    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb,\n           user_tab_cols ta, user_tab_cols tb\n    WHERE  user_constraints.table_name = :arg0 AND\n           ta.table_name = user_constraints.table_name AND\n           ta.column_name = ca.column_name AND\n           ca.table_name = ta.table_name AND\n           user_constraints.constraint_name = ca.constraint_name AND\n           user_constraints.r_constraint_name = cb.constraint_name AND\n           cb.table_name = tb.table_name AND\n           cb.column_name = tb.column_name AND\n           ca.position = cb.position' - PARAMS = ('PROCESS_EXPIRED_REMIND',); args=['PROCESS_EXPIRED_REMIND']
2023-10-17 21:11:33,081 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('PROCESS_EXPIRED_REMIND',); args=['PROCESS_EXPIRED_REMIND']
2023-10-17 21:11:33,145 [DEBUG]    utils.py.execute [90] -- (0.034) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('PROCESS_EXPIRED_REMIND',); args=['PROCESS_EXPIRED_REMIND']
2023-10-17 21:11:33,203 [DEBUG]    utils.py.execute [90] -- (0.057) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('PROCESS_EXPIRED_REMIND',); args=['PROCESS_EXPIRED_REMIND']
2023-10-17 21:11:33,234 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = "\n            SELECT\n                user_constraints.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                CASE user_constraints.constraint_type\n                    WHEN 'P' THEN 1\n                    ELSE 0\n                END AS is_primary_key,\n                CASE\n                    WHEN EXISTS (\n                        SELECT 1\n                        FROM user_indexes\n                        WHERE user_indexes.index_name = user_constraints.index_name\n                        AND user_indexes.uniqueness = 'UNIQUE'\n                    )\n                    THEN 1\n                    ELSE 0\n                END AS is_unique,\n                CASE user_constraints.constraint_type\n                    WHEN 'C' THEN 1\n                    ELSE 0\n                END AS is_check_constraint,\n                CASE\n                    WHEN user_constraints.constraint_type IN ('P', 'U') THEN 1\n                    ELSE 0\n                END AS has_index\n            FROM\n                user_constraints\n            LEFT OUTER JOIN\n                user_cons_columns cols ON user_constraints.constraint_name = cols.constraint_name\n            WHERE\n                user_constraints.constraint_type = ANY('P', 'U', 'C')\n                AND user_constraints.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('PROCESS_EXPIRED_REMIND',); args=['PROCESS_EXPIRED_REMIND']
2023-10-17 21:11:33,295 [DEBUG]    utils.py.execute [90] -- (0.030) QUERY = "\n            SELECT\n                cons.constraint_name,\n                LOWER(cols.column_name) AS column_name,\n                LOWER(rcols.table_name),\n                LOWER(rcols.column_name)\n            FROM\n                user_constraints cons\n            INNER JOIN\n                user_cons_columns rcols ON rcols.constraint_name = cons.r_constraint_name\n            LEFT OUTER JOIN\n                user_cons_columns cols ON cons.constraint_name = cols.constraint_name\n            WHERE\n                cons.constraint_type = 'R' AND\n                cons.table_name = UPPER(:arg0)\n            ORDER BY cols.position\n        " - PARAMS = ('PROCESS_EXPIRED_REMIND',); args=['PROCESS_EXPIRED_REMIND']
2023-10-17 21:11:33,361 [DEBUG]    utils.py.execute [90] -- (0.066) QUERY = '\n            SELECT\n                cols.index_name, LOWER(cols.column_name), cols.descend,\n                LOWER(ind.index_type)\n            FROM\n                user_ind_columns cols, user_indexes ind\n            WHERE\n                cols.table_name = UPPER(:arg0) AND\n                NOT EXISTS (\n                    SELECT 1\n                    FROM user_constraints cons\n                    WHERE cols.index_name = cons.index_name\n                ) AND cols.index_name = ind.index_name\n            ORDER BY cols.column_position\n        ' - PARAMS = ('PROCESS_EXPIRED_REMIND',); args=['PROCESS_EXPIRED_REMIND']
2023-10-17 21:11:33,392 [DEBUG]    utils.py.execute [90] -- (0.031) QUERY = '\n            SELECT\n                column_name,\n                data_default,\n                CASE\n                    WHEN char_used IS NULL THEN data_length\n                    ELSE char_length\n                END as internal_size\n            FROM user_tab_cols\n            WHERE table_name = UPPER(:arg0)' - PARAMS = ('PROCESS_EXPIRED_REMIND',); args=['PROCESS_EXPIRED_REMIND']
2023-10-17 21:11:33,455 [DEBUG]    utils.py.execute [90] -- (0.032) QUERY = 'SELECT * FROM "PROCESS_EXPIRED_REMIND" WHERE ROWNUM < 2 AND 2 > 0' - PARAMS = (); args=None
